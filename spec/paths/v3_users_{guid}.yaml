get:
  tags:
    - Users
  summary: Get a user
  description: Retrieve a user by its GUID.
  operationId: getUser
  security:
    - oauth:
        - cloud_controller.read
  parameters:
    - $ref: ../components/parameters/guid.yaml
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            user:
              type: object
              properties:
                guid:
                  type: string
                  description: Unique identifier for the user
                created_at:
                  type: string
                  format: date-time
                  description: The time with zone when the object was created
                updated_at:
                  type: string
                  format: date-time
                  description: The time with zone when the object was last updated
                username:
                  type: string
                  description: The username of the user
                presentation_name:
                  type: string
                  description: The presentation name of the user
                origin:
                  type: string
                  description: The origin of the user
                metadata:
                  metadata:
                    type: object
                    properties:
                      labels:
                        type: object
                        additionalProperties:
                          type: string
                        description: >
                          A set of key-value pairs that describe the resource.
                          Labels are a JSON object that contains information
                          about a resource. They are used to tag resources with
                          metadata that can be used to filter and group
                          resources. Labels are included in the response body of
                          a request to retrieve a resource.

                          Labels are user-specified key/value pairs that are
                          attached to API Resources. They are queryable,
                          identifying attributes of a resource, but they do not
                          affect the operation of CloudFoundry.


                          For example, an app may be assigned a label with key
                          sensitive and possible values true or false.


                          Users could then find all sensitive apps with a
                          selector for sensitive=true, resulting in a response
                          containing only apps having the label key sensitive
                          with a label value of true.


                          Labels

                          Labels allow users to apply identifying attributes to
                          resources that are meaningful to the user, but not the
                          CloudFoundry system.


                          Examples may include (but are not limited to):


                          "production" : "true" or "production" : "false"

                          "env" : "dev" or "env" : "test" or "env" : "prod"

                          "chargeback-code" : "abc123"

                          Label keys

                          Label keys are made up of an (optional) prefix, and
                          name. If a prefix is present, it is separated from the
                          name by a /. Prefixes are dns names intended to enable
                          namespacing of label keys.


                          A label key prefix must adhere to the following
                          restrictions:


                          Length: 0-253 characters

                          Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -,
                          and .

                          DNS subdomain format (series of subdomain labels
                          separated by .)

                          A label key name must adhere to the following
                          restrictions:


                          Length: 1-63 characters

                          Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -,
                          _, and .

                          Must begin and end with an alphanumeric character

                          Label values

                          Label values must adhere to the following
                          restrictions:


                          Length: 0-63 characters

                          Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -,
                          _, and .

                          Must begin and end with an alphanumeric character

                          Empty values are allowed
                      annotations:
                        type: object
                        additionalProperties:
                          type: string
                        description: >
                          A set of key-value pairs that describe the resource.
                          Annotations are a JSON object that contains
                          information about a resource. They are used to tag
                          resources with metadata that can be used to filter and
                          group resources. Annotations are included in the
                          response body of a request to retrieve a resource.

                          Annotations are user-specified key-value pairs that
                          are attached to API resources. They do not affect the
                          operation of Cloud Foundry. Annotations cannot be used
                          in filters.


                          When a service instance is being created, the service
                          broker is sent the annotations of the service
                          instance, and the space and organization in which the
                          service instance resides. When a service instance is
                          being updated, the service broker is sent the
                          annotations of the space and organization in which the
                          service instance resides. When a service binding is
                          being created, the service broker is sent annotations
                          of any associated app, and the space and organization
                          in which the binding resides. Only annotations with a
                          prefix (e.g. company.com/contacts) are sent to service
                          brokers.


                          Examples may include (but are not limited to):


                          "contact info": "bob@example.com jane@example.com"

                          "library versions": "Spring: 5.1, Redis Client:
                          a184098. yaml parser: 38"

                          "git-sha": "d56fe0367554ae5e878e37ed6c5b9a82f5995512"

                          Annotation keys

                          Annotation keys are made up of an (optional) prefix
                          and name. If a prefix is present, it is separated from
                          the name by a /. Prefixes are DNS names intended to
                          enable namespacing of annotation keys.


                          An annotation key prefix must adhere to the following
                          restrictions:


                          Length: 0-253 characters

                          Allowed characters: a-z, A-Z, 0-9, -, and .; emojis
                          cannot be used in keys

                          DNS subdomain format (series of subdomain annotations
                          separated by .)

                          An annotation key name must adhere to the following
                          restrictions:


                          Length: 1-63 characters

                          Allowed characters: a-z, A-Z, 0-9, -, _, and .; emojis
                          cannot be used in keys

                          Must begin and end with an alphanumeric character

                          Annotation values

                          Annotation values must adhere to the following
                          restrictions:


                          Length: 0-5000 unicode characters
                    description: >
                      Metadata is a JSON object that contains information about
                      a resource. It includes the GUID of the resource, the time
                      the resource was created, the time the resource was last
                      updated, and links to the resource.

                      Metadata is included in the response body of a request to
                      retrieve a resource.
                links:
                  links:
                    type: object
                    description: >-
                      Links provide URLs to relationships and actions for a
                      resource. Links are represented as a JSON object and
                      always contain a self link.
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - ref$: /../cf-errors.yaml#/cf-errors/400CFBadQueryParameter
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - ref$: /../cf-errors.yaml#/cf-errors/401CFNotAuthenticated
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - ref$: /../cf-errors.yaml#/cf-errors/403CFNotAuthorized
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - ref$: /../cf-errors.yaml#/cf-errors/404CFResourceNotFound
    '500':
      description: Server error
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - ref$: /../cf-errors.yaml#/cf-errors/500CFServerError
patch:
  tags:
    - Users
  summary: Update a user
  description: Update an existing user.
  operationId: updateUser
  security:
    - oauth:
        - cloud_controller.write
  parameters:
    - $ref: ../components/parameters/guid.yaml
  requestBody:
    description: User to update
    content:
      application/json:
        schema:
          userUpdate:
            type: object
            properties:
              username:
                type: string
                description: The username of the user
              presentation_name:
                type: string
                description: The presentation name of the user
              origin:
                type: string
                description: The origin of the user
              metadata:
                $ref: >-
                  #/paths/~1v3~1users~1%7Bguid%7D/get/responses/200/content/application~1json/schema/user/properties/metadata
              links:
                $ref: >-
                  #/paths/~1v3~1users~1%7Bguid%7D/get/responses/200/content/application~1json/schema/user/properties/links
  responses:
    '200':
      description: User updated
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users~1%7Bguid%7D/get/responses/200/content/application~1json/schema
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - $refs: /../cf-errors.yaml#/cf-errors/400CFUserInvalid
    '401':
      $ref: '#/paths/~1v3~1users/get/responses/401'
    '403':
      $ref: '#/paths/~1v3~1users/get/responses/403'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - ref$: /../cf-errors.yaml#/cf-errors/404CFResourceNotFound
    '500':
      $ref: '#/paths/~1v3~1users/post/responses/500'
delete:
  tags:
    - Users
  summary: Delete a user
  description: Delete a user by its GUID.
  operationId: deleteUser
  security:
    - oauth:
        - cloud_controller.write
  parameters:
    - $ref: ../components/parameters/guid.yaml
  responses:
    '204':
      description: No Content
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - $refs: /../cf-errors.yaml#/cf-errors/400CFBadQueryParameter
    '401':
      $ref: '#/paths/~1v3~1users/get/responses/401'
    '403':
      $ref: '#/paths/~1v3~1users/get/responses/403'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - ref$: /../cf-errors.yaml#/cf-errors/404CFResourceNotFound
    '500':
      $ref: '#/paths/~1v3~1users/post/responses/500'
