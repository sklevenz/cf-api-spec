get:
  tags:
    - Buildpacks
  summary: Retrieve a buildpack
  description: Retrieve details of a specific buildpack by its GUID.
  operationId: getBuildpack
  parameters:
    - $ref: ../components/parameters/guid.yaml
  responses:
    '200':
      description: Successfully retrieved buildpack
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1buildpacks~1%7Bguid%7D/patch/responses/200/content/application~1json/schema
          examples:
            buildpack:
              summary: A sample buildpack
              value:
                guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                created_at: '2023-10-01T12:00:00Z'
                updated_at: '2023-10-01T12:00:00Z'
                name: ruby_buildpack
                stack: cflinuxfs3
                position: 1
                enabled: true
                locked: false
                state: AWAITING_UPLOAD
                filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                links:
                  self:
                    href: >-
                      https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                  upload:
                    href: >-
                      https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                    method: POST
                metadata:
                  labels:
                    some: label
                  annotations:
                    some: annotation
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              $ref: >-
                #/paths/~1v3~1users/get/responses/400/content/application~1json/example/errors
  security:
    - oauth:
        - cloud_controller.read
patch:
  tags:
    - Buildpacks
  summary: Update a buildpack
  description: Update attributes of a specific buildpack by its GUID.
  operationId: ppdateBuildpack
  parameters:
    - $ref: ../components/parameters/guid.yaml
  requestBody:
    description: Buildpack object that needs to be updated
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            name:
              type: string
              description: The name of the buildpack
            stack:
              type: string
              description: The stack the buildpack is compatible with
            position:
              type: integer
              description: The position of the buildpack in the order of execution
            enabled:
              type: boolean
              description: Whether the buildpack is enabled
            locked:
              type: boolean
              description: Whether the buildpack is locked
            filename:
              type: string
              description: The filename of the buildpack
          required:
            - name
          description: Request schema for updating a buildpack
        examples:
          buildpack:
            summary: A sample buildpack
            value:
              name: ruby_buildpack
              stack: cflinuxfs3
              position: 1
              enabled: true
              locked: false
              filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
  responses:
    '200':
      description: Successfully updated buildpack
      content:
        application/json:
          schema:
            type: object
            allOf:
              - type: object
                properties:
                  guid:
                    type: string
                    format: uuid
                    description: The GUID of the resource
                  created_at:
                    type: string
                    format: date-time
                    description: >
                      The time the resource was created. 

                      Timestamps generally appear in created_at and updated_at
                      fields on resources. 

                      Precision beyond seconds is not supported, even if the
                      underlying database supports it (e.g. Postgres). 

                      As a result, filtering on sub-second timestamps is not
                      allowed.

                      All v3 timestamps have the following format
                      YYYY-MM-DDThh:mm:ssZ.

                      Example timestamp (June 30, 2020 at 11:49:04 PM UTC):
                      2020-06-30T23:49:04Z
                  updated_at:
                    type: string
                    format: date-time
                    description: >
                      The time the resource was last updated

                      Timestamps generally appear in created_at and updated_at
                      fields on resources. 

                      Precision beyond seconds is not supported, even if the
                      underlying database supports it (e.g. Postgres). 

                      As a result, filtering on sub-second timestamps is not
                      allowed.

                      All v3 timestamps have the following format
                      YYYY-MM-DDThh:mm:ssZ.

                      Example timestamp (June 30, 2020 at 11:49:04 PM UTC):
                      2020-06-30T23:49:04Z
                  links:
                    type: object
                    additionalProperties:
                      $ref: >-
                        #/paths/~1v3~1buildpacks~1%7Bguid%7D/patch/responses/200/content/application~1json/schema/allOf/1/properties/links/properties/self/allOf/0
                description: >
                  A resource represents an individual object within the system,
                  such as an app or a service. It is represented as a JSON
                  object.

                  A resource consists of several required resource fields and
                  other attributes specific to the resource.

                  See Resources and Experimental Resources for specific
                  resources.
              - properties:
                  name:
                    type: string
                    description: The name of the buildpack
                  stack:
                    type: string
                    description: The stack the buildpack is compatible with
                  position:
                    type: integer
                    description: The position of the buildpack in the order of execution
                  enabled:
                    type: boolean
                    description: Whether the buildpack is enabled
                  locked:
                    type: boolean
                    description: Whether the buildpack is locked
                  filename:
                    type: string
                    description: The filename of the buildpack
                  metadata:
                    type: object
                    properties:
                      labels:
                        type: object
                        additionalProperties:
                          type: string
                        description: >
                          A set of key-value pairs that describe the resource.
                          Labels are a JSON object that contains information
                          about a resource. They are used to tag resources with
                          metadata that can be used to filter and group
                          resources. Labels are included in the response body of
                          a request to retrieve a resource.

                          Labels are user-specified key/value pairs that are
                          attached to API Resources. They are queryable,
                          identifying attributes of a resource, but they do not
                          affect the operation of CloudFoundry.


                          For example, an app may be assigned a label with key
                          sensitive and possible values true or false.


                          Users could then find all sensitive apps with a
                          selector for sensitive=true, resulting in a response
                          containing only apps having the label key sensitive
                          with a label value of true.


                          Labels

                          Labels allow users to apply identifying attributes to
                          resources that are meaningful to the user, but not the
                          CloudFoundry system.


                          Examples may include (but are not limited to):


                          "production" : "true" or "production" : "false"

                          "env" : "dev" or "env" : "test" or "env" : "prod"

                          "chargeback-code" : "abc123"

                          Label keys

                          Label keys are made up of an (optional) prefix, and
                          name. If a prefix is present, it is separated from the
                          name by a /. Prefixes are dns names intended to enable
                          namespacing of label keys.


                          A label key prefix must adhere to the following
                          restrictions:


                          Length: 0-253 characters

                          Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -,
                          and .

                          DNS subdomain format (series of subdomain labels
                          separated by .)

                          A label key name must adhere to the following
                          restrictions:


                          Length: 1-63 characters

                          Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -,
                          _, and .

                          Must begin and end with an alphanumeric character

                          Label values

                          Label values must adhere to the following
                          restrictions:


                          Length: 0-63 characters

                          Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -,
                          _, and .

                          Must begin and end with an alphanumeric character

                          Empty values are allowed
                      annotations:
                        type: object
                        additionalProperties:
                          type: string
                        description: >
                          A set of key-value pairs that describe the resource.
                          Annotations are a JSON object that contains
                          information about a resource. They are used to tag
                          resources with metadata that can be used to filter and
                          group resources. Annotations are included in the
                          response body of a request to retrieve a resource.

                          Annotations are user-specified key-value pairs that
                          are attached to API resources. They do not affect the
                          operation of Cloud Foundry. Annotations cannot be used
                          in filters.


                          When a service instance is being created, the service
                          broker is sent the annotations of the service
                          instance, and the space and organization in which the
                          service instance resides. When a service instance is
                          being updated, the service broker is sent the
                          annotations of the space and organization in which the
                          service instance resides. When a service binding is
                          being created, the service broker is sent annotations
                          of any associated app, and the space and organization
                          in which the binding resides. Only annotations with a
                          prefix (e.g. company.com/contacts) are sent to service
                          brokers.


                          Examples may include (but are not limited to):


                          "contact info": "bob@example.com jane@example.com"

                          "library versions": "Spring: 5.1, Redis Client:
                          a184098. yaml parser: 38"

                          "git-sha": "d56fe0367554ae5e878e37ed6c5b9a82f5995512"

                          Annotation keys

                          Annotation keys are made up of an (optional) prefix
                          and name. If a prefix is present, it is separated from
                          the name by a /. Prefixes are DNS names intended to
                          enable namespacing of annotation keys.


                          An annotation key prefix must adhere to the following
                          restrictions:


                          Length: 0-253 characters

                          Allowed characters: a-z, A-Z, 0-9, -, and .; emojis
                          cannot be used in keys

                          DNS subdomain format (series of subdomain annotations
                          separated by .)

                          An annotation key name must adhere to the following
                          restrictions:


                          Length: 1-63 characters

                          Allowed characters: a-z, A-Z, 0-9, -, _, and .; emojis
                          cannot be used in keys

                          Must begin and end with an alphanumeric character

                          Annotation values

                          Annotation values must adhere to the following
                          restrictions:


                          Length: 0-5000 unicode characters
                    description: >
                      Metadata is a JSON object that contains information about
                      a resource. It includes the GUID of the resource, the time
                      the resource was created, the time the resource was last
                      updated, and links to the resource.

                      Metadata is included in the response body of a request to
                      retrieve a resource.
                  links:
                    allOf:
                      - type: object
                        description: >-
                          Links provide URLs to relationships and actions for a
                          resource. Links are represented as a JSON object and
                          always contain a self link.
                    properties:
                      self:
                        allOf:
                          - type: object
                            properties:
                              href:
                                type: string
                                description: The URL of the link
                              method:
                                type: string
                                description: >-
                                  An optional field containing the HTTP method
                                  to be used when following the URL
                            required:
                              - href
                            description: >
                              Each link is keyed by its type and will include a
                              href for the URL and an optional method for links
                              that cannot be followed using GET.
                          - description: The URL of the buildpack
                      upload:
                        allOf:
                          - $ref: >-
                              #/paths/~1v3~1buildpacks~1%7Bguid%7D/patch/responses/200/content/application~1json/schema/allOf/1/properties/links/properties/self/allOf/0
                          - description: The URL to upload the buildpack
            description: >-
              A buildpack represents a set of scripts used to prepare an
              application for launch.
          examples:
            buildpack:
              summary: A sample buildpack
              value:
                guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                created_at: '2023-10-01T12:00:00Z'
                updated_at: '2023-10-01T12:00:00Z'
                name: ruby_buildpack
                stack: cflinuxfs3
                position: 1
                enabled: true
                locked: false
                filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                links:
                  self:
                    href: >-
                      https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                  upload:
                    href: >-
                      https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                    method: POST
                metadata:
                  labels:
                    some: label
                  annotations:
                    some: annotation
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              $ref: >-
                #/paths/~1v3~1users/post/responses/400/content/application~1json/example/errors
    '401':
      $ref: '#/paths/~1v3~1users/get/responses/401'
    '403':
      $ref: '#/paths/~1v3~1users/get/responses/403'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - code: 10010
                title: CF-ResourceNotFound
                detail: '%s'
    '422':
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              - code: 10008
                title: CF-UnprocessableEntity
                detail: '%s'
    '500':
      $ref: '#/paths/~1v3~1users/post/responses/500'
  security:
    - oauth:
        - cloud_controller.write
delete:
  tags:
    - Buildpacks
  summary: Delete a buildpack
  description: Delete a specific buildpack by its GUID.
  operationId: deleteBuildpack
  parameters:
    - $ref: ../components/parameters/guid.yaml
  responses:
    '204':
      description: Successfully deleted buildpack
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              $ref: >-
                #/paths/~1v3~1users/get/responses/400/content/application~1json/example/errors
    '401':
      $ref: '#/paths/~1v3~1users/get/responses/401'
    '403':
      $ref: '#/paths/~1v3~1users/get/responses/403'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: >-
              #/paths/~1v3~1users/get/responses/400/content/application~1json/schema
          example:
            errors:
              $ref: >-
                #/paths/~1v3~1users/get/responses/400/content/application~1json/example/errors
    '500':
      $ref: '#/paths/~1v3~1users/post/responses/500'
  security:
    - oauth:
        - cloud_controller.write
