openapi: 3.1.0
info:
  title: Cloud Foundry V3 API
  description: "# Welcome to the Cloud Foundry V3 API docs! Version 3 adds support for several key features:\n\n- Running one-off tasks on Cloud Foundry\n- Applications consisting of several processes via a Procfile\n- Direct access to application packages and droplets\n- Changing application source code without stopping the app via deployments\n\n# Getting help\nThe CAPI team can most easily be reached on our Slack channel for questions and issues regarding the API. To report an issue with the docs or API, please feel free to file a GitHub issue on our API repo, cloud_controller_ng.\nWe recommend reaching out to Slack first as we will be most responsive there.\n    \n# More resources\n- The Cloud Foundry V2 API is still depricated but still available for interacting with Cloud Foundry.\n- Running Tasks\n- V3 API Documentation OpenAPI Spec Source Code. "
  version: 3.1.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.example.local
    description: Cloud Foundry V3 API server
x-components:
  responses:
    cf-errors:
      400CFBadRequest: &400CFBadRequest
        - code: 1004
          title: CF-BadRequest
          detail: "Bad request: %s"
      500CFDatabaseError: &500CFDatabaseError
        - code: 10011
          title: CF-DatabaseError
          detail: "Database error"
      400CFLockingError: &400CFLockingError
        - code: 102
          title: CF-LockingError
          detail: "Optimistic locking failure"
      500CFSystemError: &500CFSystemError
        - code: 111
          title: CF-SystemError
          detail: "System Exception Encountered"
      403CFForbidden: &403CFForbidden
        - code: 200
          title: CF-Forbidden
          detail: "Operation not permitted"
      403CFUserNotFound: &403CFUserNotFound
        - code: 201
          title: CF-UserNotFound
          detail: "User not found"
      403CFHttpsRequired: &403CFHttpsRequired
        - code: 202
          title: CF-HttpsRequired
          detail: "HTTPS required"
      400CFAppInvalid: &400CFAppInvalid
        - code: 100001
          title: CF-AppInvalid
          detail: "The app is invalid: %s"
      404CFAppNotFound: &404CFAppNotFound
        - code: 100004
          title: CF-AppNotFound
          detail: "The app could not be found: %s"
      404CFAppNoResources: &404CFAppNoResources
        - code: 302
          title: CF-AppNoResources
          detail: "Couldn't find a place to run an app"
      404CFAppFileNotFound: &404CFAppFileNotFound
        - code: 303
          title: CF-AppFileNotFound
          detail: "Could not find : '%s'"
      400CFAppInstanceNotFound: &400CFAppInstanceNotFound
        - code: 304
          title: CF-AppInstanceNotFound
          detail: "Could not find instance: '%s'"
      400CFAppStopped: &400CFAppStopped
        - code: 305
          title: CF-AppStopped
          detail: "Operation not permitted on a stopped app"
      500CFAppFileError: &500CFAppFileError
        - code: 306
          title: CF-AppFileError
          detail: "Error retrieving file '%s'"
      400CFAppInvalidRuntime: &400CFAppInvalidRuntime
        - code: 307
          title: CF-AppInvalidRuntime
          detail: "Invalid runtime specification [%s] for framework: '%s'"
      400CFAppInvalidFramework: &400CFAppInvalidFramework
        - code: 308
          title: CF-AppInvalidFramework
          detail: "Invalid framework description: '%s'"
      400CFAppDebugDisallowed: &400CFAppDebugDisallowed
        - code: 309
          title: CF-AppDebugDisallowed
          detail: "Cloud controller has disallowed debugging."
      500CFAppStagingError: &500CFAppStagingError
        - code: 310
          title: CF-AppStagingError
          detail: "Staging failed: '%s'"
      400CFResourcesUnknownPackageType: &400CFResourcesUnknownPackageType
        - code: 400
          title: CF-ResourcesUnknownPackageType
          detail: "%"
      400CFResourcesMissingResource: &400CFResourcesMissingResource
        - code: 401
          title: CF-ResourcesMissingResource
          detail: "Could not find the requested resource"
      500CFResourcesPackagingFailed: &500CFResourcesPackagingFailed
        - code: 402
          title: CF-ResourcesPackagingFailed
          detail: "App packaging failed: '%s'"
      404CFServiceNotFound: &404CFServiceNotFound
        - code: 120003
          title: CF-ServiceNotFound
          detail: "The service could not be found: %s"
      404CFBindingNotFound: &404CFBindingNotFound
        - code: 501
          title: CF-BindingNotFound
          detail: "Binding not found"
      404CFTokenNotFound: &404CFTokenNotFound
        - code: 502
          title: CF-TokenNotFound
          detail: "Token not found"
      502CFServiceGatewayError: &502CFServiceGatewayError
        - code: 503
          title: CF-ServiceGatewayError
          detail: "Unexpected response from service gateway"
      403CFAccountTooManyServices: &403CFAccountTooManyServices
        - code: 504
          title: CF-AccountTooManyServices
          detail: "Too many Services provisioned: %s, you're allowed: %s"
      501CFExtensionNotImpl: &501CFExtensionNotImpl
        - code: 505
          title: CF-ExtensionNotImpl
          detail: "Service extension %s is not implemented."
      404CFUnsupportedVersion: &404CFUnsupportedVersion
        - code: 506
          title: CF-UnsupportedVersion
          detail: "Unsupported service version %s."
      500CFSdsError: &500CFSdsError
        - code: 507
          title: CF-SdsError
          detail: "Get error from serialization_data_server: '%s'"
      500CFSdsNotFound: &500CFSdsNotFound
        - code: 508
          title: CF-SdsNotFound
          detail: "No available active serialization data server"
      403CFAccountNotEnoughMemory: &403CFAccountNotEnoughMemory
        - code: 600
          title: CF-AccountNotEnoughMemory
          detail: "Not enough memory capacity, you're allowed: %s"
      403CFAccountAppsTooMany: &403CFAccountAppsTooMany
        - code: 601
          title: CF-AccountAppsTooMany
          detail: "Too many applications: %s, you're allowed: %s"
      403CFAccountAppTooManyUris: &403CFAccountAppTooManyUris
        - code: 602
          title: CF-AccountAppTooManyUris
          detail: "Too many URIs: %s, you're allowed: %s"
      400CFUriInvalid: &400CFUriInvalid
        - code: 700
          title: CF-UriInvalid
          detail: "%s"
      400CFUriAlreadyTaken: &400CFUriAlreadyTaken
        - code: 701
          title: CF-UriAlreadyTaken
          detail: "%s"
      403CFUriNotAllowed: &403CFUriNotAllowed
        - code: 702
          title: CF-UriNotAllowed
          detail: "External URIs are not enabled for this account"
      500CFStagingTimedOut: &500CFStagingTimedOut
        - code: 800
          title: CF-StagingTimedOut
          detail: "Timed out waiting for staging to complete"
      500CFStagingFailed: &500CFStagingFailed
        - code: 801
          title: CF-StagingFailed
          detail: "Staging failed"
      422CFUniquenessError: &422CFUniquenessError
        - code: 10016
          title: CF-UniquenessError
          detail: "%s"
      401CFInvalidAuthToken: &401CFInvalidAuthToken
        - code: 1000
          title: CF-InvalidAuthToken
          detail: "Invalid Auth Token"
      400CFMessageParseError: &400CFMessageParseError
        - code: 1001
          title: CF-MessageParseError
          detail: "Request invalid due to parse error: %s"
      400CFInvalidRelation: &400CFInvalidRelation
        - code: 1002
          title: CF-InvalidRelation
          detail: "%s"
      400CFInvalidContentType: &400CFInvalidContentType
        - code: 1003
          title: CF-InvalidContentType
          detail: "Invalid content type, expected: %s"
      404CFNotFound: &404CFNotFound
        - code: 10000
          title: CF-NotFound
          detail: "Unknown request"
      500CFServerError: &500CFServerError
        - code: 10001
          title: CF-ServerError
          detail: "Server error"
      401CFNotAuthenticated: &401CFNotAuthenticated
        - code: 10002
          title: CF-NotAuthenticated
          detail: "Authentication error"
      403CFNotAuthorized: &403CFNotAuthorized
        - code: 10003
          title: CF-NotAuthorized
          detail: "You are not authorized to perform the requested action"
      400CFInvalidRequest: &400CFInvalidRequest
        - code: 10004
          title: CF-InvalidRequest
          detail: "The request is invalid"
      400CFBadQueryParameter: &400CFBadQueryParameter
        - code: 10005
          title: CF-BadQueryParameter
          detail: "The query parameter is invalid: %s"
      400CFAssociationNotEmpty: &400CFAssociationNotEmpty
        - code: 10006
          title: CF-AssociationNotEmpty
          detail: "Please delete the %s associations for your %s."
      403CFInsufficientScope: &403CFInsufficientScope
        - code: 10007
          title: CF-InsufficientScope
          detail: "Your token lacks the necessary scopes to access this resource."
      422CFUnprocessableEntity: &422CFUnprocessableEntity
        - code: 10008
          title: CF-UnprocessableEntity
          detail: "%s"
      400CFUnableToPerform: &400CFUnableToPerform
        - code: 10009
          title: CF-UnableToPerform
          detail: "%s could not be completed: %s"
      404CFResourceNotFound: &404CFResourceNotFound
        - code: 10010
          title: CF-ResourceNotFound
          detail: "%s"
      500CFOrderByParameterInvalid: &500CFOrderByParameterInvalid
        - code: 10012
          title: CF-OrderByParameterInvalid
          detail: "Cannot order by: %s"
      429CFRateLimitExceeded: &429CFRateLimitExceeded
        - code: 10013
          title: CF-RateLimitExceeded
          detail: "Rate Limit Exceeded"
      429CFIPBasedRateLimitExceeded: &429CFIPBasedRateLimitExceeded
        - code: 10014
          title: CF-IPBasedRateLimitExceeded
          detail: "Rate Limit Exceeded: Unauthenticated requests from this IP address have exceeded the limit. Please log in."
      503CFServiceUnavailable: &503CFServiceUnavailable
        - code: 10015
          title: CF-ServiceUnavailable
          detail: "%s"
      429CFServiceBrokerRateLimitExceeded: &429CFServiceBrokerRateLimitExceeded
        - code: 10016
          title: CF-ServiceBrokerRateLimitExceeded
          detail: "Service broker concurrent request limit exceeded"
      403CFOrgSuspended: &403CFOrgSuspended
        - code: 10017
          title: CF-OrgSuspended
          detail: "The organization is suspended"
      429CFRateLimitV2APIExceeded: &429CFRateLimitV2APIExceeded
        - code: 10018
          title: CF-RateLimitV2APIExceeded
          detail: "Rate Limit of V2 API Exceeded. Please consider using the V3 API"
      400CFUserInvalid: &400CFUserInvalid
        - code: 20001
          title: CF-UserInvalid
          detail: "The user info is invalid: %s"
      400CFUaaIdTaken: &400CFUaaIdTaken
        - code: 20002
          title: CF-UaaIdTaken
          detail: "The UAA ID is taken: %s"
      404CFUserNotFound: &404CFUserNotFound
        - code: 20003
          title: CF-UserNotFound
          detail: "The user could not be found: %s"
      503CFUaaUnavailable: &503CFUaaUnavailable
        - code: 20004
          title: CF-UaaUnavailable
          detail: "The UAA service is currently unavailable"
      400CFUserIsInMultipleOrigins: &400CFUserIsInMultipleOrigins
        - code: 20006
          title: CF-UserIsInMultipleOrigins
          detail: "The user exists in multiple origins. Specify an origin for the requested user from: %s"
      404CFUserWithOriginNotFound: &404CFUserWithOriginNotFound
        - code: 20007
          title: CF-UserWithOriginNotFound
          detail: "The user could not be found, %s"
      400CFOrganizationInvalid: &400CFOrganizationInvalid
        - code: 30001
          title: CF-OrganizationInvalid
          detail: "The organization info is invalid: %s"
      400CFOrganizationNameTaken: &400CFOrganizationNameTaken
        - code: 30002
          title: CF-OrganizationNameTaken
          detail: "The organization name is taken: %s"
      404CFOrganizationNotFound: &404CFOrganizationNotFound
        - code: 30003
          title: CF-OrganizationNotFound
          detail: "The organization could not be found: %s"
      403CFLastManagerInOrg: &403CFLastManagerInOrg
        - code: 30004
          title: CF-LastManagerInOrg
          detail: "Cannot remove last Org Manager in org"
      403CFLastBillingManagerInOrg: &403CFLastBillingManagerInOrg
        - code: 30005
          title: CF-LastBillingManagerInOrg
          detail: "Cannot remove last Billing Manager in org"
      403CFLastUserInOrg: &403CFLastUserInOrg
        - code: 30006
          title: CF-LastUserInOrg
          detail: "Cannot remove last User in org"
      400CFOrganizationAlreadySet: &400CFOrganizationAlreadySet
        - code: 30007
          title: CF-OrganizationAlreadySet
          detail: "Cannot change organization"
      400CFSpaceInvalid: &400CFSpaceInvalid
        - code: 40001
          title: CF-SpaceInvalid
          detail: "The app space info is invalid: %s"
      400CFSpaceNameTaken: &400CFSpaceNameTaken
        - code: 40002
          title: CF-SpaceNameTaken
          detail: "The app space name is taken: %s"
      400CFSpaceUserNotInOrg: &400CFSpaceUserNotInOrg
        - code: 40003
          title: CF-SpaceUserNotInOrg
          detail: "The app space and the user are not in the same org: %s"
      404CFSpaceNotFound: &404CFSpaceNotFound
        - code: 40004
          title: CF-SpaceNotFound
          detail: "The app space could not be found: %s"
      400CFServiceInstanceNameEmpty: &400CFServiceInstanceNameEmpty
        - code: 60001
          title: CF-ServiceInstanceNameEmpty
          detail: "Service instance name is required."
      400CFServiceInstanceNameTaken: &400CFServiceInstanceNameTaken
        - code: 60002
          title: CF-ServiceInstanceNameTaken
          detail: "The service instance name is taken: %s"
      400CFServiceInstanceServiceBindingWrongSpace: &400CFServiceInstanceServiceBindingWrongSpace
        - code: 60003
          title: CF-ServiceInstanceServiceBindingWrongSpace
          detail: "The service instance and the service binding are in different app spaces: %s"
      400CFServiceInstanceInvalid: &400CFServiceInstanceInvalid
        - code: 60003
          title: CF-ServiceInstanceInvalid
          detail: "The service instance is invalid: %s"
      404CFServiceInstanceNotFound: &404CFServiceInstanceNotFound
        - code: 60004
          title: CF-ServiceInstanceNotFound
          detail: "The service instance could not be found: %s"
      400CFServiceInstanceQuotaExceeded: &400CFServiceInstanceQuotaExceeded
        - code: 60005
          title: CF-ServiceInstanceQuotaExceeded
          detail: "You have exceeded your organization's services limit."
      400CFPreviouslyUsedAs_ServiceInstancePaidQuotaExceeded: &400CFPreviouslyUsedAs_ServiceInstancePaidQuotaExceeded
        - code: 60006
          title: CF-PreviouslyUsedAs_ServiceInstancePaidQuotaExceeded
          detail: "You have exceeded your organization's services limit."
      400CFServiceInstanceServicePlanNotAllowed: &400CFServiceInstanceServicePlanNotAllowed
        - code: 60007
          title: CF-ServiceInstanceServicePlanNotAllowed
          detail: "The service instance cannot be created because paid service plans are not allowed."
      400CFServiceInstanceDuplicateNotAllowed: &400CFServiceInstanceDuplicateNotAllowed
        - code: 60008
          title: CF-ServiceInstanceDuplicateNotAllowed
          detail: "An instance of this service is already present in this space. Some services only support one instance per space."
      400CFServiceInstanceNameTooLong: &400CFServiceInstanceNameTooLong
        - code: 60009
          title: CF-ServiceInstanceNameTooLong
          detail: "You have requested an invalid service instance name. Names are limited to 255 characters."
      403CFServiceInstanceOrganizationNotAuthorized: &403CFServiceInstanceOrganizationNotAuthorized
        - code: 60010
          title: CF-ServiceInstanceOrganizationNotAuthorized
          detail: "A service instance for the selected plan cannot be created in this organization. The plan is visible because another organization you belong to has access to it."
      409CFServiceInstanceDeprovisionFailed: &409CFServiceInstanceDeprovisionFailed
        - code: 60011
          title: CF-ServiceInstanceDeprovisionFailed
          detail: "The service broker reported an error during deprovisioning: %s"
      400CFServiceInstanceSpaceQuotaExceeded: &400CFServiceInstanceSpaceQuotaExceeded
        - code: 60012
          title: CF-ServiceInstanceSpaceQuotaExceeded
          detail: "You have exceeded your space's services limit."
      400CFServiceInstanceServicePlanNotAllowedBySpaceQuota: &400CFServiceInstanceServicePlanNotAllowedBySpaceQuota
        - code: 60013
          title: CF-ServiceInstanceServicePlanNotAllowedBySpaceQuota
          detail: "The service instance cannot be created because paid service plans are not allowed for your space."
      400CFServiceInstanceSpaceChangeNotAllowed: &400CFServiceInstanceSpaceChangeNotAllowed
        - code: 60014
          title: CF-ServiceInstanceSpaceChangeNotAllowed
          detail: "Cannot update space for service instance."
      400CFServiceInstanceTagsTooLong: &400CFServiceInstanceTagsTooLong
        - code: 60015
          title: CF-ServiceInstanceTagsTooLong
          detail: "Combined length of tags for service %s must be 2048 characters or less."
      409CFAsyncServiceInstanceOperationInProgress: &409CFAsyncServiceInstanceOperationInProgress
        - code: 60016
          title: CF-AsyncServiceInstanceOperationInProgress
          detail: "An operation for service instance %s is in progress."
      400CFServiceInstanceRouteBindingSpaceMismatch: &400CFServiceInstanceRouteBindingSpaceMismatch
        - code: 60017
          title: CF-ServiceInstanceRouteBindingSpaceMismatch
          detail: "The service instance and the route are in different spaces."
      403CFServiceInstanceSpaceNotAuthorized: &403CFServiceInstanceSpaceNotAuthorized
        - code: 60018
          title: CF-ServiceInstanceSpaceNotAuthorized
          detail: "A service instance for the selected plan cannot be created in this space."
      400CFServiceInstanceRouteServiceURLInvalid: &400CFServiceInstanceRouteServiceURLInvalid
        - code: 60019
          title: CF-ServiceInstanceRouteServiceURLInvalid
          detail: "The route service URL is invalid: %s"
      400CFServiceInstanceRouteServiceRequiresDiego: &400CFServiceInstanceRouteServiceRequiresDiego
        - code: 60020
          title: CF-ServiceInstanceRouteServiceRequiresDiego
          detail: "Route services are only supported for apps on Diego. Unbind the service instance from the route or enable Diego for the app."
      403CFServiceInstanceRouteServiceDisabled: &403CFServiceInstanceRouteServiceDisabled
        - code: 60021
          title: CF-ServiceInstanceRouteServiceDisabled
          detail: "Support for route services is disabled"
      400CFAppPortMappingRequiresDiego: &400CFAppPortMappingRequiresDiego
        - code: 60022
          title: CF-AppPortMappingRequiresDiego
          detail: "App ports are supported for Diego apps only."
      400CFRoutePortNotEnabledOnApp: &400CFRoutePortNotEnabledOnApp
        - code: 60023
          title: CF-RoutePortNotEnabledOnApp
          detail: "Routes can only be mapped to ports already enabled for the application."
      400CFMultipleAppPortsMappedDiegoToDea: &400CFMultipleAppPortsMappedDiegoToDea
        - code: 60024
          title: CF-MultipleAppPortsMappedDiegoToDea
          detail: "The app has routes mapped to multiple ports. Multiple ports are supported for Diego only. Please unmap routes from all but one app port. Multiple routes can be mapped to the same port if desired."
      403CFVolumeMountServiceDisabled: &403CFVolumeMountServiceDisabled
        - code: 60025
          title: CF-VolumeMountServiceDisabled
          detail: "Support for volume mount services is disabled"
      400CFDockerAppToDea: &400CFDockerAppToDea
        - code: 60026
          title: CF-DockerAppToDea
          detail: "Docker apps cannot run on DEAs"
      502CFServiceInstanceRecursiveDeleteFailed: &502CFServiceInstanceRecursiveDeleteFailed
        - code: 60027
          title: CF-ServiceInstanceRecursiveDeleteFailed
          detail: "Deletion of service instance %s failed because one or more associated resources could not be deleted.\n\n%s"
        - code: 60027
          title: CF-ServiceInstanceRecursiveDeleteFailed
          detail: "Deletion of service instance %s failed because one or more associated resources could not be deleted.\n%s"
        - code: 60027
          title: CF-ServiceInstanceRecursiveDeleteFailed
          detail: "Deletion of service instance %s failed because one or more associated resources could not be deleted. %s"
      404CFManagedServiceInstanceNotFound: &404CFManagedServiceInstanceNotFound
        - code: 60028
          title: CF-ManagedServiceInstanceNotFound
          detail: "The service instance could not be found: %s"
      403CFServiceInstanceWithInaccessiblePlanNotUpdateable: &403CFServiceInstanceWithInaccessiblePlanNotUpdateable
        - code: 60029
          title: CF-ServiceInstanceWithInaccessiblePlanNotUpdateable
          detail: "Cannot update %s of a service instance that belongs to inaccessible plan"
      400CFServiceInstanceProvisionFailed: &400CFServiceInstanceProvisionFailed
        - code: 60030
          title: CF-ServiceInstanceProvisionFailed
          detail: "The service broker reported an error during provisioning: %s"
      400CFRuntimeInvalid: &400CFRuntimeInvalid
        - code: 70001
          title: CF-RuntimeInvalid
          detail: "The runtime is invalid: %s"
      400CFRuntimeNameTaken: &400CFRuntimeNameTaken
        - code: 70002
          title: CF-RuntimeNameTaken
          detail: "The runtime name is taken: %s"
      404CFRuntimeNotFound: &404CFRuntimeNotFound
        - code: 70003
          title: CF-RuntimeNotFound
          detail: "The runtime could not be found: %s"
      400CFFrameworkInvalid: &400CFFrameworkInvalid
        - code: 80001
          title: CF-FrameworkInvalid
          detail: "The framework is invalid: %s"
      400CFFrameworkNameTaken: &400CFFrameworkNameTaken
        - code: 80002
          title: CF-FrameworkNameTaken
          detail: "The framework name is taken: %s"
      404CFFrameworkNotFound: &404CFFrameworkNotFound
        - code: 80003
          title: CF-FrameworkNotFound
          detail: "The framework could not be found: %s"
      400CFServiceBindingInvalid: &400CFServiceBindingInvalid
        - code: 90001
          title: CF-ServiceBindingInvalid
          detail: "The service binding is invalid: %s"
      400CFServiceBindingDifferentSpaces: &400CFServiceBindingDifferentSpaces
        - code: 90002
          title: CF-ServiceBindingDifferentSpaces
          detail: "The app and the service are not in the same app space: %s"
      400CFServiceBindingAppServiceTaken: &400CFServiceBindingAppServiceTaken
        - code: 90003
          title: CF-ServiceBindingAppServiceTaken
          detail: "%s"
      404CFServiceBindingNotFound: &404CFServiceBindingNotFound
        - code: 90004
          title: CF-ServiceBindingNotFound
          detail: "The service binding could not be found: %s"
      400CFUnbindableService: &400CFUnbindableService
        - code: 90005
          title: CF-UnbindableService
          detail: "The service instance doesn't support binding."
      502CFInvalidLoggingServiceBinding: &502CFInvalidLoggingServiceBinding
        - code: 90006
          title: CF-InvalidLoggingServiceBinding
          detail: "The service is attempting to stream logs from your application, but is not registered as a logging service. Please contact the service provider."
      400CFServiceFetchBindingParametersNotSupported: &400CFServiceFetchBindingParametersNotSupported
        - code: 90007
          title: CF-ServiceFetchBindingParametersNotSupported
          detail: "This service does not support fetching service binding parameters."
      409CFAsyncServiceBindingOperationInProgress: &409CFAsyncServiceBindingOperationInProgress
        - code: 90008
          title: CF-AsyncServiceBindingOperationInProgress
          detail: "An operation for the service binding between app %s and service instance %s is in progress."
      400CFAppNameTaken: &400CFAppNameTaken
        - code: 100002
          title: CF-AppNameTaken
          detail: "The app name is taken: %s"
      400CFAppMemoryQuotaExceeded: &400CFAppMemoryQuotaExceeded
        - code: 100005
          title: CF-AppMemoryQuotaExceeded
          detail: "You have exceeded your organization's memory limit: %s"
      400CFAppMemoryInvalid: &400CFAppMemoryInvalid
        - code: 100006
          title: CF-AppMemoryInvalid
          detail: "You have specified an invalid amount of memory for your application."
      400CFQuotaInstanceMemoryLimitExceeded: &400CFQuotaInstanceMemoryLimitExceeded
        - code: 100007
          title: CF-QuotaInstanceMemoryLimitExceeded
          detail: "You have exceeded the instance memory limit for your organization's quota."
      400CFQuotaInstanceLimitExceeded: &400CFQuotaInstanceLimitExceeded
        - code: 100008
          title: CF-QuotaInstanceLimitExceeded
          detail: "You have exceeded the instance limit for your organization's quota."
      400CFAppMemoryInsufficientForSidecars: &400CFAppMemoryInsufficientForSidecars
        - code: 100009
          title: CF-AppMemoryInsufficientForSidecars
          detail: "The requested memory allocation is not large enough to run all of your sidecar processes."
      400CFOrgQuotaLogRateLimitExceeded: &400CFOrgQuotaLogRateLimitExceeded
        - code: 100010
          title: CF-OrgQuotaLogRateLimitExceeded
          detail: "You have exceeded your organization's log rate limit: %s"
      400CFServicePlanInvalid: &400CFServicePlanInvalid
        - code: 110001
          title: CF-ServicePlanInvalid
          detail: "The service plan is invalid: %s"
      400CFServicePlanNameTaken: &400CFServicePlanNameTaken
        - code: 110002
          title: CF-ServicePlanNameTaken
          detail: "The service plan name is taken: %s"
      404CFServicePlanNotFound: &404CFServicePlanNotFound
        - code: 110003
          title: CF-ServicePlanNotFound
          detail: "The service plan could not be found: %s"
      400CFServicePlanNotUpdateable: &400CFServicePlanNotUpdateable
        - code: 110004
          title: CF-ServicePlanNotUpdateable
          detail: "The service does not support changing plans."
      400CFServiceInvalid: &400CFServiceInvalid
        - code: 120001
          title: CF-ServiceInvalid
          detail: "The service is invalid: %s"
      400CFServiceLabelTaken: &400CFServiceLabelTaken
        - code: 120002
          title: CF-ServiceLabelTaken
          detail: "The service label is taken: %s"
      400CFServiceFetchInstanceParametersNotSupported: &400CFServiceFetchInstanceParametersNotSupported
        - code: 120004
          title: CF-ServiceFetchInstanceParametersNotSupported
          detail: "This service does not support fetching service instance parameters."
      400CFDomainInvalid: &400CFDomainInvalid
        - code: 130001
          title: CF-DomainInvalid
          detail: "The domain is invalid: %s"
      404CFDomainNotFound: &404CFDomainNotFound
        - code: 130002
          title: CF-DomainNotFound
          detail: "The domain could not be found: %s"
      400CFDomainNameTaken: &400CFDomainNameTaken
        - code: 130003
          title: CF-DomainNameTaken
          detail: "The domain name is taken: %s"
      400CFPathInvalid: &400CFPathInvalid
        - code: 130004
          title: CF-PathInvalid
          detail: "The path is invalid: %s"
      400CFTotalPrivateDomainsExceeded: &400CFTotalPrivateDomainsExceeded
        - code: 130005
          title: CF-TotalPrivateDomainsExceeded
          detail: "The number of private domains exceeds the quota for organization: %s"
      400CFServiceDoesNotSupportRoutes: &400CFServiceDoesNotSupportRoutes
        - code: 130006
          title: CF-ServiceDoesNotSupportRoutes
          detail: "This service does not support route binding."
      400CFRouteAlreadyBoundToServiceInstance: &400CFRouteAlreadyBoundToServiceInstance
        - code: 130007
          title: CF-RouteAlreadyBoundToServiceInstance
          detail: "A route may only be bound to a single service instance"
      400CFServiceInstanceAlreadyBoundToSameRoute: &400CFServiceInstanceAlreadyBoundToSameRoute
        - code: 130008
          title: CF-ServiceInstanceAlreadyBoundToSameRoute
          detail: "The route and service instance are already bound."
      422CFInternalDomainCannotBeDeleted: &422CFInternalDomainCannotBeDeleted
        - code: 130009
          title: CF-InternalDomainCannotBeDeleted
          detail: "The domain '%s' cannot be deleted. It is reserved by the platform."
      400CFRouteServiceCannotBeBoundToInternalRoute: &400CFRouteServiceCannotBeBoundToInternalRoute
        - code: 130010
          title: CF-RouteServiceCannotBeBoundToInternalRoute
          detail: "Route services cannot be bound to internal routes."
      400CFLegacyApiWithoutDefaultSpace: &400CFLegacyApiWithoutDefaultSpace
        - code: 140001
          title: CF-LegacyApiWithoutDefaultSpace
          detail: "A legacy api call requiring a default app space was called, but no default app space is set for the user."
      400CFAppPackageInvalid: &400CFAppPackageInvalid
        - code: 150001
          title: CF-AppPackageInvalid
          detail: "The app package is invalid: %s"
      404CFAppPackageNotFound: &404CFAppPackageNotFound
        - code: 150002
          title: CF-AppPackageNotFound
          detail: "The app package could not be found: %s"
      503CFInsufficientRunningResourcesAvailable: &503CFInsufficientRunningResourcesAvailable
        - code: 150003
          title: CF-InsufficientRunningResourcesAvailable
          detail: "One or more instances could not be started because of insufficient running resources."
      400CFPackageBitsAlreadyUploaded: &400CFPackageBitsAlreadyUploaded
        - code: 150004
          title: CF-PackageBitsAlreadyUploaded
          detail: "Bits may be uploaded only once. Create a new package to upload different bits."
      400CFBlobstoreNotLocal: &400CFBlobstoreNotLocal
        - code: 150005
          title: CF-BlobstoreNotLocal
          detail: "Downloading blobs can only be done directly to the blobstore."
      502CFBlobstoreUnavailable: &502CFBlobstoreUnavailable
        - code: 150006
          title: CF-BlobstoreUnavailable
          detail: "Failed to perform operation due to blobstore unavailability."
      500CFBlobstoreError: &500CFBlobstoreError
        - code: 150007
          title: CF-BlobstoreError
          detail: "Failed to perform blobstore operation after three retries."
      400CFDockerImageMissing: &400CFDockerImageMissing
        - code: 150008
          title: CF-DockerImageMissing
          detail: "Docker credentials can only be supplied for apps with a 'docker_image'"
      502CFAppRecursiveDeleteFailed: &502CFAppRecursiveDeleteFailed
        - code: 150009
          title: CF-AppRecursiveDeleteFailed
          detail: "Deletion of app %s failed because one or more associated resources could not be deleted.\n\n%s"
        - code: 150009
          title: CF-AppRecursiveDeleteFailed
          detail: "Deletion of app %s failed because one or more associated resources could not be deleted.\n%s"
        - code: 150009
          title: CF-AppRecursiveDeleteFailed
          detail: "Deletion of app %s failed because one or more associated resources could not be deleted. %s"
      400CFAppBitsUploadInvalid: &400CFAppBitsUploadInvalid
        - code: 160001
          title: CF-AppBitsUploadInvalid
          detail: "The app upload is invalid: %s"
      400CFAppBitsCopyInvalid: &400CFAppBitsCopyInvalid
        - code: 160002
          title: CF-AppBitsCopyInvalid
          detail: "The app copy is invalid: %s"
      400CFAppResourcesFileModeInvalid: &400CFAppResourcesFileModeInvalid
        - code: 160003
          title: CF-AppResourcesFileModeInvalid
          detail: "The resource file mode is invalid: %s"
      400CFAppResourcesFilePathInvalid: &400CFAppResourcesFilePathInvalid
        - code: 160004
          title: CF-AppResourcesFilePathInvalid
          detail: "The resource file path is invalid: %s"
      400CFStagingError: &400CFStagingError
        - code: 170001
          title: CF-StagingError
          detail: "Staging error: %s"
      400CFNotStaged: &400CFNotStaged
        - code: 170002
          title: CF-NotStaged
          detail: "App has not finished staging"
      400CFNoAppDetectedError: &400CFNoAppDetectedError
        - code: 170003
          title: CF-NoAppDetectedError
          detail: "An app was not successfully detected by any available buildpack"
      400CFBuildpackCompileFailed: &400CFBuildpackCompileFailed
        - code: 170004
          title: CF-BuildpackCompileFailed
          detail: "App staging failed in the buildpack compile phase"
      400CFBuildpackReleaseFailed: &400CFBuildpackReleaseFailed
        - code: 170005
          title: CF-BuildpackReleaseFailed
          detail: "App staging failed in the buildpack release phase"
      400CFNoBuildpacksFound: &400CFNoBuildpacksFound
        - code: 170006
          title: CF-NoBuildpacksFound
          detail: "There are no buildpacks available"
      504CFStagingTimeExpired: &504CFStagingTimeExpired
        - code: 170007
          title: CF-StagingTimeExpired
          detail: "Staging time expired: %s"
      400CFInsufficientResources: &400CFInsufficientResources
        - code: 170008
          title: CF-InsufficientResources
          detail: "Insufficient resources"
      400CFNoCompatibleCell: &400CFNoCompatibleCell
        - code: 170009
          title: CF-NoCompatibleCell
          detail: "Found no compatible cell"
      503CFStagerUnavailable: &503CFStagerUnavailable
        - code: 170010
          title: CF-StagerUnavailable
          detail: "Stager is unavailable: %s"
      500CFStagerError: &500CFStagerError
        - code: 170011
          title: CF-StagerError
          detail: "Stager error: %s"
      500CFRunnerInvalidRequest: &500CFRunnerInvalidRequest
        - code: 170014
          title: CF-RunnerInvalidRequest
          detail: "Runner invalid request: %s"
      503CFRunnerUnavailable: &503CFRunnerUnavailable
        - code: 170015
          title: CF-RunnerUnavailable
          detail: "Runner is unavailable: %s"
      500CFRunnerError: &500CFRunnerError
        - code: 170016
          title: CF-RunnerError
          detail: "Runner error: %s"
      422CFStagingInProgress: &422CFStagingInProgress
        - code: 170017
          title: CF-StagingInProgress
          detail: "Only one build can be STAGING at a time per application."
      500CFInvalidTaskAddress: &500CFInvalidTaskAddress
        - code: 170018
          title: CF-InvalidTaskAddress
          detail: "Invalid config: %s"
      500CFTaskError: &500CFTaskError
        - code: 170019
          title: CF-TaskError
          detail: "Task failed: %s"
      503CFTaskWorkersUnavailable: &503CFTaskWorkersUnavailable
        - code: 170020
          title: CF-TaskWorkersUnavailable
          detail: "Task workers are unavailable: %s"
      422CFInvalidTaskRequest: &422CFInvalidTaskRequest
        - code: 170021
          title: CF-InvalidTaskRequest
          detail: "The task request is invalid: %s"
      503CFServiceGatewayError: &503CFServiceGatewayError
        - code: 180002
          title: CF-ServiceGatewayError
          detail: "Service gateway internal error: %s"
      501CFServiceNotImplemented: &501CFServiceNotImplemented
        - code: 180003
          title: CF-ServiceNotImplemented
          detail: "Operation not supported for service"
      501CFSDSNotAvailable: &501CFSDSNotAvailable
        - code: 180004
          title: CF-SDSNotAvailable
          detail: "No serialization service backends available"
      400CFFileError: &400CFFileError
        - code: 190001
          title: CF-FileError
          detail: "File error: %s"
      400CFStatsError: &400CFStatsError
        - code: 200001
          title: CF-StatsError
          detail: "Stats error: %s"
      503CFStatsUnavailable: &503CFStatsUnavailable
        - code: 200002
          title: CF-StatsUnavailable
          detail: "Stats unavailable: %s"
      400CFAppStoppedStatsError: &400CFAppStoppedStatsError
        - code: 200003
          title: CF-AppStoppedStatsError
          detail: "Could not fetch stats for stopped app: %s"
      400CFRouteInvalid: &400CFRouteInvalid
        - code: 210001
          title: CF-RouteInvalid
          detail: "The route is invalid: %s"
      404CFRouteNotFound: &404CFRouteNotFound
        - code: 210002
          title: CF-RouteNotFound
          detail: "The route could not be found: %s"
      400CFRouteHostTaken: &400CFRouteHostTaken
        - code: 210003
          title: CF-RouteHostTaken
          detail: "The host is taken: %s"
      400CFRoutePathTaken: &400CFRoutePathTaken
        - code: 210004
          title: CF-RoutePathTaken
          detail: "The path is taken: %s"
      400CFRoutePortTaken: &400CFRoutePortTaken
        - code: 210005
          title: CF-RoutePortTaken
          detail: "The port is taken: %s"
      400CFRouteMappingTaken: &400CFRouteMappingTaken
        - code: 210006
          title: CF-RouteMappingTaken
          detail: "The route mapping is taken: %s"
      404CFRouteMappingNotFound: &404CFRouteMappingNotFound
        - code: 210007
          title: CF-RouteMappingNotFound
          detail: "The route mapping could not be found: %s"
      403CFOutOfRouterGroupPorts: &403CFOutOfRouterGroupPorts
        - code: 21008
          title: CF-OutOfRouterGroupPorts
          detail: "There are no more ports available for router group: %s. Please contact your administrator for more information."
      404CFRouterGroupNotFound: &404CFRouterGroupNotFound
        - code: 210009
          title: CF-RouterGroupNotFound
          detail: "The router group could not be found: %s"
      400CFInstancesError: &400CFInstancesError
        - code: 220001
          title: CF-InstancesError
          detail: "Instances error: %s"
      503CFInstancesUnavailable: &503CFInstancesUnavailable
        - code: 220002
          title: CF-InstancesUnavailable
          detail: "Instances information unavailable: %s"
      404CFEventNotFound: &404CFEventNotFound
        - code: 230002
          title: CF-EventNotFound
          detail: "Event could not be found: %s"
      404CFQuotaDefinitionNotFound: &404CFQuotaDefinitionNotFound
        - code: 240001
          title: CF-QuotaDefinitionNotFound
          detail: "Quota Definition could not be found: %s"
      400CFQuotaDefinitionNameTaken: &400CFQuotaDefinitionNameTaken
        - code: 240002
          title: CF-QuotaDefinitionNameTaken
          detail: "Quota Definition is taken: %s"
      400CFQuotaDefinitionInvalid: &400CFQuotaDefinitionInvalid
        - code: 240003
          title: CF-QuotaDefinitionInvalid
          detail: "Quota Definition is invalid: %s"
      400CFQuotaDefinitionMemoryLimitInvalid: &400CFQuotaDefinitionMemoryLimitInvalid
        - code: 240004
          title: CF-QuotaDefinitionMemoryLimitInvalid
          detail: "Quota Definition memory limit cannot be less than -1"
      400CFStackInvalid: &400CFStackInvalid
        - code: 250001
          title: CF-StackInvalid
          detail: "The stack is invalid: %s"
      400CFStackNameTaken: &400CFStackNameTaken
        - code: 250002
          title: CF-StackNameTaken
          detail: "The stack name is taken: %s"
      404CFStackNotFound: &404CFStackNotFound
        - code: 250003
          title: CF-StackNotFound
          detail: "The stack could not be found: %s"
      400CFServicePlanVisibilityInvalid: &400CFServicePlanVisibilityInvalid
        - code: 260001
          title: CF-ServicePlanVisibilityInvalid
          detail: "Service Plan Visibility is invalid: %s"
      400CFServicePlanVisibilityAlreadyExists: &400CFServicePlanVisibilityAlreadyExists
        - code: 260002
          title: CF-ServicePlanVisibilityAlreadyExists
          detail: "This combination of ServicePlan and Organization is already taken: %s"
      404CFServicePlanVisibilityNotFound: &404CFServicePlanVisibilityNotFound
        - code: 260003
          title: CF-ServicePlanVisibilityNotFound
          detail: "The service plan visibility could not be found: %s"
      400CFServiceBrokerInvalid: &400CFServiceBrokerInvalid
        - code: 270001
          title: CF-ServiceBrokerInvalid
          detail: "Service broker is invalid: %s"
      400CFServiceBrokerNameTaken: &400CFServiceBrokerNameTaken
        - code: 270002
          title: CF-ServiceBrokerNameTaken
          detail: "The service broker name is taken"
      400CFServiceBrokerUrlTaken: &400CFServiceBrokerUrlTaken
        - code: 270003
          title: CF-ServiceBrokerUrlTaken
          detail: "The service broker url is taken: %s"
      404CFServiceBrokerNotFound: &404CFServiceBrokerNotFound
        - code: 270004
          title: CF-ServiceBrokerNotFound
          detail: "The service broker was not found: %s"
      400CFServiceBrokerNotRemovable: &400CFServiceBrokerNotRemovable
        - code: 270010
          title: CF-ServiceBrokerNotRemovable
          detail: "Can not remove brokers that have associated service instances: %s"
      400CFServiceBrokerUrlInvalid: &400CFServiceBrokerUrlInvalid
        - code: 270011
          title: CF-ServiceBrokerUrlInvalid
          detail: "%s is not a valid URL"
      502CFServiceBrokerCatalogInvalid: &502CFServiceBrokerCatalogInvalid
        - code: 270012
          title: CF-ServiceBrokerCatalogInvalid
          detail: "Service broker catalog is invalid: %s"
      502CFServiceBrokerDashboardClientFailure: &502CFServiceBrokerDashboardClientFailure
        - code: 270013
          title: CF-ServiceBrokerDashboardClientFailure
          detail: "Service broker dashboard clients could not be modified: %s"
      400CFServiceBrokerAsyncRequired: &400CFServiceBrokerAsyncRequired
        - code: 270014
          title: CF-ServiceBrokerAsyncRequired
          detail: "This service plan requires client support for asynchronous service operations."
      502CFServiceDashboardClientMissingUrl: &502CFServiceDashboardClientMissingUrl
        - code: 270015
          title: CF-ServiceDashboardClientMissingUrl
          detail: "Service broker returned dashboard client configuration without a dashboard URL"
      400CFServiceBrokerUrlBasicAuthNotSupported: &400CFServiceBrokerUrlBasicAuthNotSupported
        - code: 270016
          title: CF-ServiceBrokerUrlBasicAuthNotSupported
          detail: "User name and password fields in the broker URI are not supported"
      502CFServiceBrokerRespondedAsyncWhenNotAllowed: &502CFServiceBrokerRespondedAsyncWhenNotAllowed
        - code: 270017
          title: CF-ServiceBrokerRespondedAsyncWhenNotAllowed
          detail: "The service broker responded asynchronously to a request, but the accepts_incomplete query parameter was false or not given."
      422CFServiceBrokerConcurrencyError: &422CFServiceBrokerConcurrencyError
        - code: 270018
          title: CF-ServiceBrokerConcurrencyError
          detail: "The service broker could not perform this operation in parallel with other running operations"
      502CFServiceBrokerCatalogIncompatible: &502CFServiceBrokerCatalogIncompatible
        - code: 270019
          title: CF-ServiceBrokerCatalogIncompatible
          detail: "Service broker catalog is incompatible: %s"
      502CFServiceBrokerRequestRejected: &502CFServiceBrokerRequestRejected
        - code: 270020
          title: CF-ServiceBrokerRequestRejected
          detail: "The service broker rejected the request. Status Code: %s. Please check that the URL points to a valid service broker."
      502CFServiceBrokerRequestMalformed: &502CFServiceBrokerRequestMalformed
        - code: 270021
          title: CF-ServiceBrokerRequestMalformed
          detail: "The service broker returned an invalid response: expected valid JSON object in body. Please check that the URL points to a valid service broker."
      502CFServiceBrokerSyncFailed: &502CFServiceBrokerSyncFailed
        - code: 270022
          title: CF-ServiceBrokerSyncFailed
          detail: "Encountered an error while attempting to sync cloud controller with the service broker's catalog: %s"
      422CFBuildpackNameStackTaken: &422CFBuildpackNameStackTaken
        - code: 290000
          title: CF-BuildpackNameStackTaken
          detail: "The buildpack name %s is already in use for the stack %s"
      400CFBuildpackNameTaken: &400CFBuildpackNameTaken
        - code: 290001
          title: CF-BuildpackNameTaken
          detail: "The buildpack name is already in use: %s"
      400CFBuildpackBitsUploadInvalid: &400CFBuildpackBitsUploadInvalid
        - code: 290002
          title: CF-BuildpackBitsUploadInvalid
          detail: "The buildpack upload is invalid: %s"
      400CFBuildpackInvalid: &400CFBuildpackInvalid
        - code: 290003
          title: CF-BuildpackInvalid
          detail: "Buildpack is invalid: %s"
      400CFCustomBuildpacksDisabled: &400CFCustomBuildpacksDisabled
        - code: 290004
          title: CF-CustomBuildpacksDisabled
          detail: "Custom buildpacks are disabled"
      409CFBuildpackLocked: &409CFBuildpackLocked
        - code: 290005
          title: CF-BuildpackLocked
          detail: "The buildpack is locked"
      524CFJobTimeout: &524CFJobTimeout
        - code: 290006
          title: CF-JobTimeout
          detail: "The job execution has timed out."
      524CFSpaceDeleteTimeout: &524CFSpaceDeleteTimeout
        - code: 290007
          title: CF-SpaceDeleteTimeout
          detail: "Deletion of space %s timed out before all resources within could be deleted"
      502CFSpaceDeletionFailed: &502CFSpaceDeletionFailed
        - code: 290008
          title: CF-SpaceDeletionFailed
          detail: "Deletion of space %s failed because one or more resources within could not be deleted.\n\n%s"
        - code: 290008
          title: CF-SpaceDeletionFailed
          detail: "Deletion of space %s failed because one or more resources within could not be deleted.\n%s"
        - code: 290008
          title: CF-SpaceDeletionFailed
          detail: "Deletion of space %s failed because one or more resources within could not be deleted. %s"
      524CFOrganizationDeleteTimeout: &524CFOrganizationDeleteTimeout
        - code: 290009
          title: CF-OrganizationDeleteTimeout
          detail: "Delete of organization %s timed out before all resources within could be deleted"
      502CFOrganizationDeletionFailed: &502CFOrganizationDeletionFailed
        - code: 290010
          title: CF-OrganizationDeletionFailed
          detail: "Deletion of organization %s failed because one or more resources within could not be deleted.\n\n%s"
        - code: 290010
          title: CF-OrganizationDeletionFailed
          detail: "Deletion of organization %s failed because one or more resources within could not be deleted.\n%s"
        - code: 290010
          title: CF-OrganizationDeletionFailed
          detail: "Deletion of organization %s failed because one or more resources within could not be deleted. %s"
      400CFNonrecursiveSpaceDeletionFailed: &400CFNonrecursiveSpaceDeletionFailed
        - code: 290011
          title: CF-NonrecursiveSpaceDeletionFailed
          detail: "Resource inside space %s must first be deleted, or specify recursive delete."
      524CFOrganizationRolesDeletionTimeout: &524CFOrganizationRolesDeletionTimeout
        - code: 290013
          title: CF-OrganizationRolesDeletionTimeout
          detail: "Deletion of roles for organization %s timed out before all roles could be deleted"
      502CFOrganizationRolesDeletionFailed: &502CFOrganizationRolesDeletionFailed
        - code: 290014
          title: CF-OrganizationRolesDeletionFailed
          detail: "Failed to delete one or more roles for organization %s"
      524CFSpaceRolesDeletionTimeout: &524CFSpaceRolesDeletionTimeout
        - code: 290013
          title: CF-SpaceRolesDeletionTimeout
          detail: "Deletion of roles for space %s timed out before all roles could be deleted"
      502CFSpaceRolesDeletionFailed: &502CFSpaceRolesDeletionFailed
        - code: 290016
          title: CF-SpaceRolesDeletionFailed
          detail: "Failed to delete one or more roles for space %s"
      400CFSecurityGroupInvalid: &400CFSecurityGroupInvalid
        - code: 300001
          title: CF-SecurityGroupInvalid
          detail: "The security group is invalid: %s"
      404CFSecurityGroupNotFound: &404CFSecurityGroupNotFound
        - code: 300002
          title: CF-SecurityGroupNotFound
          detail: "The security group could not be found: %s"
      400CFSecurityGroupStagingDefaultInvalid: &400CFSecurityGroupStagingDefaultInvalid
        - code: 300003
          title: CF-SecurityGroupStagingDefaultInvalid
          detail: "The security group could not be found: %s"
      400CFSecurityGroupRunningDefaultInvalid: &400CFSecurityGroupRunningDefaultInvalid
        - code: 300004
          title: CF-SecurityGroupRunningDefaultInvalid
          detail: "The security group could not be found: %s"
      400CFSecurityGroupNameTaken: &400CFSecurityGroupNameTaken
        - code: 300005
          title: CF-SecurityGroupNameTaken
          detail: "The security group name is taken: %s"
      400CFSpaceQuotaDefinitionInvalid: &400CFSpaceQuotaDefinitionInvalid
        - code: 310001
          title: CF-SpaceQuotaDefinitionInvalid
          detail: "Space Quota Definition is invalid: %s"
      400CFSpaceQuotaDefinitionNameTaken: &400CFSpaceQuotaDefinitionNameTaken
        - code: 310002
          title: CF-SpaceQuotaDefinitionNameTaken
          detail: "The space quota definition name is taken: %s"
      400CFSpaceQuotaMemoryLimitExceeded: &400CFSpaceQuotaMemoryLimitExceeded
        - code: 310003
          title: CF-SpaceQuotaMemoryLimitExceeded
          detail: "You have exceeded your space's memory limit: %s"
      400CFSpaceQuotaInstanceMemoryLimitExceeded: &400CFSpaceQuotaInstanceMemoryLimitExceeded
        - code: 310004
          title: CF-SpaceQuotaInstanceMemoryLimitExceeded
          detail: "You have exceeded the instance memory limit for your space's quota."
      400CFSpaceQuotaTotalRoutesExceeded: &400CFSpaceQuotaTotalRoutesExceeded
        - code: 310005
          title: CF-SpaceQuotaTotalRoutesExceeded
          detail: "You have exceeded the total routes for your space's quota."
      400CFOrgQuotaTotalRoutesExceeded: &400CFOrgQuotaTotalRoutesExceeded
        - code: 310006
          title: CF-OrgQuotaTotalRoutesExceeded
          detail: "You have exceeded the total routes for your organization's quota."
      404CFSpaceQuotaDefinitionNotFound: &404CFSpaceQuotaDefinitionNotFound
        - code: 310007
          title: CF-SpaceQuotaDefinitionNotFound
          detail: "Space Quota Definition could not be found: %s"
      400CFSpaceQuotaInstanceLimitExceeded: &400CFSpaceQuotaInstanceLimitExceeded
        - code: 310008
          title: CF-SpaceQuotaInstanceLimitExceeded
          detail: "You have exceeded the instance limit for your space's quota."
      400CFOrgQuotaTotalReservedRoutePortsExceeded: &400CFOrgQuotaTotalReservedRoutePortsExceeded
        - code: 310009
          title: CF-OrgQuotaTotalReservedRoutePortsExceeded
          detail: "You have exceeded the total reserved route ports for your organization's quota."
      400CFSpaceQuotaTotalReservedRoutePortsExceeded: &400CFSpaceQuotaTotalReservedRoutePortsExceeded
        - code: 310010
          title: CF-SpaceQuotaTotalReservedRoutePortsExceeded
          detail: "You have exceeded the total reserved route ports for your space's quota."
      400CFSpaceQuotaLogRateLimitExceeded: &400CFSpaceQuotaLogRateLimitExceeded
        - code: 310011
          title: CF-SpaceQuotaLogRateLimitExceeded
          detail: "You have exceeded your space's log rate limit: %s"
      400CFDiegoDisabled: &400CFDiegoDisabled
        - code: 320001
          title: CF-DiegoDisabled
          detail: "Diego has not been enabled."
      400CFDiegoDockerBuildpackConflict: &400CFDiegoDockerBuildpackConflict
        - code: 320002
          title: CF-DiegoDockerBuildpackConflict
          detail: "You cannot specify a custom buildpack and a docker image at the same time."
      400CFDockerDisabled: &400CFDockerDisabled
        - code: 320003
          title: CF-DockerDisabled
          detail: "Docker support has not been enabled."
      403CFStagingBackendInvalid: &403CFStagingBackendInvalid
        - code: 320004
          title: CF-StagingBackendInvalid
          detail: "The request staging completion endpoint only handles apps desired to stage on the Diego backend."
      403CFBackendSelectionNotAuthorized: &403CFBackendSelectionNotAuthorized
        - code: 320005
          title: CF-BackendSelectionNotAuthorized
          detail: "You cannot select the backend on which to run this application"
      400CFRevisionsEnabled: &400CFRevisionsEnabled
        - code: 320006
          title: CF-RevisionsEnabled
          detail: "V2 restaging is disabled when your app has revisions enabled"
      400CFCNBDisabled: &400CFCNBDisabled
        - code: 320007
          title: CF-CNBDisabled
          detail: "Cloud Native Buildpacks support has not been enabled."
      404CFFeatureFlagNotFound: &404CFFeatureFlagNotFound
        - code: 330000
          title: CF-FeatureFlagNotFound
          detail: "The feature flag could not be found: %s"
      400CFFeatureFlagInvalid: &400CFFeatureFlagInvalid
        - code: 330001
          title: CF-FeatureFlagInvalid
          detail: "The feature flag is invalid: %s"
      403CFFeatureDisabled: &403CFFeatureDisabled
        - code: 330002
          title: CF-FeatureDisabled
          detail: "Feature Disabled: %s"
      404CFUserProvidedServiceInstanceNotFound: &404CFUserProvidedServiceInstanceNotFound
        - code: 340001
          title: CF-UserProvidedServiceInstanceNotFound
          detail: "The service instance could not be found: %s"
      400CFUserProvidedServiceInstanceHandlerNeeded: &400CFUserProvidedServiceInstanceHandlerNeeded
        - code: 340002
          title: CF-UserProvidedServiceInstanceHandlerNeeded
          detail: "Please use the User Provided Services API to manage this resource."
      400CFProcessInvalid: &400CFProcessInvalid
        - code: 350001
          title: CF-ProcessInvalid
          detail: "The process is invalid: %s"
      400CFUnableToDelete: &400CFUnableToDelete
        - code: 350002
          title: CF-UnableToDelete
          detail: "Unable to perform delete action: %s"
      404CFProcessNotFound: &404CFProcessNotFound
        - code: 350003
          title: CF-ProcessNotFound
          detail: "The process could not be found: %s"
      400CFServiceKeyNameTaken: &400CFServiceKeyNameTaken
        - code: 360001
          title: CF-ServiceKeyNameTaken
          detail: "The service key name is taken: %s"
      400CFServiceKeyInvalid: &400CFServiceKeyInvalid
        - code: 360002
          title: CF-ServiceKeyInvalid
          detail: "The service key is invalid: %s"
      404CFServiceKeyNotFound: &404CFServiceKeyNotFound
        - code: 360003
          title: CF-ServiceKeyNotFound
          detail: "The service key could not be found: %s"
      400CFServiceKeyNotSupported: &400CFServiceKeyNotSupported
        - code: 360004
          title: CF-ServiceKeyNotSupported
          detail: "%s"
      503CFServiceKeyCredentialStoreUnavailable: &503CFServiceKeyCredentialStoreUnavailable
        - code: 360005
          title: CF-ServiceKeyCredentialStoreUnavailable
          detail: "Credential store is unavailable"
      503CFRoutingApiUnavailable: &503CFRoutingApiUnavailable
        - code: 370001
          title: CF-RoutingApiUnavailable
          detail: "The Routing API is currently unavailable"
      403CFRoutingApiDisabled: &403CFRoutingApiDisabled
        - code: 370003
          title: CF-RoutingApiDisabled
          detail: "Routing API is disabled"
      400CFEnvironmentVariableGroupInvalid: &400CFEnvironmentVariableGroupInvalid
        - code: 380001
          title: CF-EnvironmentVariableGroupInvalid
          detail: "The Environment Variable Group is invalid: %s"
      400CFDropletUploadInvalid: &400CFDropletUploadInvalid
        - code: 380002
          title: CF-DropletUploadInvalid
          detail: "The droplet upload is invalid: %s"
      502CFServiceInstanceUnshareFailed: &502CFServiceInstanceUnshareFailed
        - code: 390001
          title: CF-ServiceInstanceUnshareFailed
          detail: "Unshare of service instance failed: \n\n%s"
        - code: 390001
          title: CF-ServiceInstanceUnshareFailed
          detail: "Unshare of service instance failed:\n%s"
        - code: 390001
          title: CF-ServiceInstanceUnshareFailed
          detail: "Unshare of service instance failed: %s"
      422CFServiceInstanceDeletionSharesExists: &422CFServiceInstanceDeletionSharesExists
        - code: 390002
          title: CF-ServiceInstanceDeletionSharesExists
          detail: "Service instances must be unshared before they can be deleted. Unsharing %s will automatically delete any bindings that have been made to applications in other spaces."
      422CFSharedServiceInstanceCannotBeRenamed: &422CFSharedServiceInstanceCannotBeRenamed
        - code: 390003
          title: CF-SharedServiceInstanceCannotBeRenamed
          detail: "message: 'Service instances that have been shared cannot be renamed'"
      403CFSharedServiceInstanceNotUpdatableInTargetSpace: &403CFSharedServiceInstanceNotUpdatableInTargetSpace
        - code: 390004
          title: CF-SharedServiceInstanceNotUpdatableInTargetSpace
          detail: "message: 'You cannot update service instances that have been shared with you'"
      403CFSharedServiceInstanceNotDeletableInTargetSpace: &403CFSharedServiceInstanceNotDeletableInTargetSpace
        - code: 390005
          title: CF-SharedServiceInstanceNotDeletableInTargetSpace
          detail: "message: 'You cannot delete service instances that have been shared with you'"
      422CFMaintenanceInfoNotSupported: &422CFMaintenanceInfoNotSupported
        - code: 390006
          title: CF-MaintenanceInfoNotSupported
          detail: "The service broker does not support upgrades for service instances created from this plan."
      422CFMaintenanceInfoNotSemver: &422CFMaintenanceInfoNotSemver
        - code: 390007
          title: CF-MaintenanceInfoNotSemver
          detail: "maintenance_info.version should be a semantic version."
      422CFMaintenanceInfoNotUpdatableWhenChangingPlan: &422CFMaintenanceInfoNotUpdatableWhenChangingPlan
        - code: 390008
          title: CF-MaintenanceInfoNotUpdatableWhenChangingPlan
          detail: "maintenance_info should not be changed when switching to different plan."
      422CFMaintenanceInfoConflict: &422CFMaintenanceInfoConflict
        - code: 390009
          title: CF-MaintenanceInfoConflict
          detail: "maintenance_info.version requested is invalid. Please ensure the catalog is up to date and you are providing a version supported by this service plan."
      422CFBuildpackStacksDontMatch: &422CFBuildpackStacksDontMatch
        - code: 390011
          title: CF-BuildpackStacksDontMatch
          detail: "message: 'Uploaded buildpack stack (%s) does not match %s'"
      422CFBuildpackStackDoesNotExist: &422CFBuildpackStackDoesNotExist
        - code: 390012
          title: CF-BuildpackStackDoesNotExist
          detail: "message: 'Uploaded buildpack stack (%s) does not exist'"
      422CFBuildpackZipError: &422CFBuildpackZipError
        - code: 390013
          title: CF-BuildpackZipError
          detail: "message: 'Buildpack zip error: %s'"
      403CFDeploymentsDisabled: &403CFDeploymentsDisabled
        - code: 390014
          title: CF-DeploymentsDisabled
          detail: "Deployments cannot be created due to manifest property 'temporary_disable_deployments'"
      422CFNoCurrentEncryptionKey: &422CFNoCurrentEncryptionKey
        - code: 390015
          title: CF-NoCurrentEncryptionKey
          detail: "Please set the desired encryption key in the manifest at ‘cc.database_encryption.current_key_label’"
      422CFScaleDisabledDuringDeployment: &422CFScaleDisabledDuringDeployment
        - code: 390016
          title: CF-ScaleDisabledDuringDeployment
          detail: "Cannot scale this process while a deployment is in flight."
      422CFProcessUpdateDisabledDuringDeployment: &422CFProcessUpdateDisabledDuringDeployment
        - code: 390017
          title: CF-ProcessUpdateDisabledDuringDeployment
          detail: "Cannot update this process while a deployment is in flight."
      422CFLabelLimitExceeded: &422CFLabelLimitExceeded
        - code: 390020
          title: CF-LabelLimitExceeded
          detail: "Failed to add %d labels because it would exceed maximum of %d"
      422CFAnnotationLimitExceeded: &422CFAnnotationLimitExceeded
        - code: 390023
          title: CF-AnnotationLimitExceeded
          detail: "Failed to add %d annotations because it would exceed maximum of %d"
      422CFStopDisabledDuringDeployment: &422CFStopDisabledDuringDeployment
        - code: 390024
          title: CF-StopDisabledDuringDeployment
          detail: "Cannot stop the app while it is deploying, please cancel the deployment before stopping the app."
      422CFKubernetesRouteResourceError: &422CFKubernetesRouteResourceError
        - code: 400001
          title: CF-KubernetesRouteResourceError
          detail: "Failed to create/update/delete Route resource with guid '%s' on Kubernetes"
      422CFKpackImageError: &422CFKpackImageError
        - code: 400002
          title: CF-KpackImageError
          detail: "Failed to %s Image resource for staging: '%s'"
      422CFKpackBuilderError: &422CFKpackBuilderError
        - code: 400003
          title: CF-KpackBuilderError
          detail: "Failed to %s Builder resource: '%s'"
      422CFEiriniLRPError: &422CFEiriniLRPError
        - code: 410001
          title: CF-EiriniLRPError
          detail: "Failed to %s LRP resource: '%s'"
      500CFKorifiError: &500CFKorifiError
        - code: 420000
          title: CF-KorifiError
          detail: "%s"
      500CFDeserializationError: &500CFDeserializationError
        - code: 420001
          title: CF-DeserializationError
          detail: "%s"
      400CFCNBGenericBuildFailed: &400CFCNBGenericBuildFailed
        - code: 430001
          title: CF-CNBGenericBuildFailed
          detail: "cnb: generic build failure"
      400CFCNBDownloadBuildpackFailed: &400CFCNBDownloadBuildpackFailed
        - code: 430002
          title: CF-CNBDownloadBuildpackFailed
          detail: "cnb: downloading buildpacks failed"
      400CFCNBDetectFailed: &400CFCNBDetectFailed
        - code: 430003
          title: CF-CNBDetectFailed
          detail: "cnb: detecting failed"
      400CFCNBBuildFailed: &400CFCNBBuildFailed
        - code: 430004
          title: CF-CNBBuildFailed
          detail: "cnb: building failed"
      400CFCNBExportFailed: &400CFCNBExportFailed
        - code: 430005
          title: CF-CNBExportFailed
          detail: "cnb: exporting failed"
      400CFCNBLaunchFailed: &400CFCNBLaunchFailed
        - code: 430006
          title: CF-CNBLaunchFailed
          detail: "cnb: launching failed"
      400CFCNBRestoreFailed: &400CFCNBRestoreFailed
        - code: 430007
          title: CF-CNBRestoreFailed
          detail: "cnb: restore failed"
      422CFServiceBrokerNotRemovable: &422CFServiceBrokerNotRemovable
        - code: 270010
          title: CF-ServiceBrokerNotRemovable
          detail: "Can not remove brokers that have associated service instances: %s"
      422CFServiceBrokerGone: &422CFServiceBrokerGone
        - code: 270011
          title: CF-ServiceBrokerGone
          detail: "The service broker was removed before the synchronization completed"
components:
  schemas:
    baseSchema:
      type: object
      properties:
        guid:
          type: string
          format: uuid
          description: The GUID of the resource
        created_at:
          type: string
          format: date-time
          description: "The time the resource was created. \nTimestamps generally appear in created_at and updated_at fields on resources. \nPrecision beyond seconds is not supported, even if the underlying database supports it (e.g. Postgres). \nAs a result, filtering on sub-second timestamps is not allowed.\nAll v3 timestamps have the following format YYYY-MM-DDThh:mm:ssZ.\nExample timestamp (June 30, 2020 at 11:49:04 PM UTC): 2020-06-30T23:49:04Z\n"
        updated_at:
          type: string
          format: date-time
          description: "The time the resource was last updated\nTimestamps generally appear in created_at and updated_at fields on resources. \nPrecision beyond seconds is not supported, even if the underlying database supports it (e.g. Postgres). \nAs a result, filtering on sub-second timestamps is not allowed.\nAll v3 timestamps have the following format YYYY-MM-DDThh:mm:ssZ.\nExample timestamp (June 30, 2020 at 11:49:04 PM UTC): 2020-06-30T23:49:04Z\n"
        links:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/link'
      description: |
        A resource represents an individual object within the system, such as an app or a service. It is represented as a JSON object.
        A resource consists of several required resource fields and other attributes specific to the resource.
        See Resources and Experimental Resources for specific resources.
    relationships:
      type: object
      description: |
        Relationships represent associations between resources. When relationships are mutable, they can be used to create, read, update, and delete these associations. An app’s relationship to its current droplet is mutable, but an app’s relationship to its space is not.

        Relationships do not affect the fundamental properties of a resource, but may affect their behavior and permissions logic. Relationships are tied to the lifecycles of the associated resources and will be removed if either of the associated resources are deleted. For example, if a user is removed from an organization, both the user and the organization persist, but the relationship between them does not.

        Not all resources implement every relationship operation demonstrated in the examples below. See the docs for each resource to see how it interacts with its relationships.

        Endpoints that return relationship data list this information under the relationships key.

        The relationship object
        The relationship object is a key-value pair that uniquely identifies a resource. In practice this is almost always the guid of a resource.
    relationship:
      type: object
      properties:
        guid:
          type: string
          format: uuid
          description: The GUID of the resource
    relationshipToOne:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/relationship'
      description: |
        Some relationships relate a resource to exactly one other resource. For example an app can belong to only one space.
    relationshipToMany:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/relationship'
      description: |
        Some relationships relate a resource to several other resources. For example, an isolation segment can be entitled to multiple organizations.
    errors:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
                description: A numeric code for this error
              detail:
                type: string
                description: Detailed description of the error
              title:
                type: string
                description: Name of the error
      description: |
        An error response will always return a list of error objects. Errors appear on the job resource for asynchronous operations.
        Clients should use the code and title fields for programmatically handling specific errors. The message in the detail field is subject to change over time.
    links:
      type: object
      description: Links provide URLs to relationships and actions for a resource. Links are represented as a JSON object and always contain a self link.
    link:
      type: object
      properties:
        href:
          type: string
          description: The URL of the link
        method:
          type: string
          description: An optional field containing the HTTP method to be used when following the URL
      required:
        - href
      description: |
        Each link is keyed by its type and will include a href for the URL and an optional method for links that cannot be followed using GET.
    pagination:
      type: object
      properties:
        total_results:
          type: integer
          description: The total number of results available
        total_pages:
          type: integer
          description: The total number of pages available
        first:
          allOf:
            - $ref: '#/components/schemas/link'
            - description: The first page of results
        last:
          allOf:
            - $ref: '#/components/schemas/link'
            - description: The last page of results
        next:
          allOf:
            - $ref: '#/components/schemas/link'
            - description: The next page of results
        previous:
          allOf:
            - $ref: '#/components/schemas/link'
            - description: The previous page of results
      description: |
        Pagination is a technique used to divide a large set of results into smaller, more manageable sets. This allows clients to retrieve results in smaller chunks, reducing the amount of data transferred and improving performance.
        The pagination object is a JSON object that contains information about the pagination state of the results. It includes the total number of results available, the total number of pages available, and links to the first, last, next, and previous pages of results.
    metadata:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
          description: |
            A set of key-value pairs that describe the resource. Labels are a JSON object that contains information about a resource. They are used to tag resources with metadata that can be used to filter and group resources. Labels are included in the response body of a request to retrieve a resource.
            Labels are user-specified key/value pairs that are attached to API Resources. They are queryable, identifying attributes of a resource, but they do not affect the operation of CloudFoundry.

            For example, an app may be assigned a label with key sensitive and possible values true or false.

            Users could then find all sensitive apps with a selector for sensitive=true, resulting in a response containing only apps having the label key sensitive with a label value of true.

            Labels
            Labels allow users to apply identifying attributes to resources that are meaningful to the user, but not the CloudFoundry system.

            Examples may include (but are not limited to):

            "production" : "true" or "production" : "false"
            "env" : "dev" or "env" : "test" or "env" : "prod"
            "chargeback-code" : "abc123"
            Label keys
            Label keys are made up of an (optional) prefix, and name. If a prefix is present, it is separated from the name by a /. Prefixes are dns names intended to enable namespacing of label keys.

            A label key prefix must adhere to the following restrictions:

            Length: 0-253 characters
            Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -, and .
            DNS subdomain format (series of subdomain labels separated by .)
            A label key name must adhere to the following restrictions:

            Length: 1-63 characters
            Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -, _, and .
            Must begin and end with an alphanumeric character
            Label values
            Label values must adhere to the following restrictions:

            Length: 0-63 characters
            Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -, _, and .
            Must begin and end with an alphanumeric character
            Empty values are allowed
        annotations:
          type: object
          additionalProperties:
            type: string
          description: |
            A set of key-value pairs that describe the resource. Annotations are a JSON object that contains information about a resource. They are used to tag resources with metadata that can be used to filter and group resources. Annotations are included in the response body of a request to retrieve a resource.
            Annotations are user-specified key-value pairs that are attached to API resources. They do not affect the operation of Cloud Foundry. Annotations cannot be used in filters.

            When a service instance is being created, the service broker is sent the annotations of the service instance, and the space and organization in which the service instance resides. When a service instance is being updated, the service broker is sent the annotations of the space and organization in which the service instance resides. When a service binding is being created, the service broker is sent annotations of any associated app, and the space and organization in which the binding resides. Only annotations with a prefix (e.g. company.com/contacts) are sent to service brokers.

            Examples may include (but are not limited to):

            "contact info": "bob@example.com jane@example.com"
            "library versions": "Spring: 5.1, Redis Client: a184098. yaml parser: 38"
            "git-sha": "d56fe0367554ae5e878e37ed6c5b9a82f5995512"
            Annotation keys
            Annotation keys are made up of an (optional) prefix and name. If a prefix is present, it is separated from the name by a /. Prefixes are DNS names intended to enable namespacing of annotation keys.

            An annotation key prefix must adhere to the following restrictions:

            Length: 0-253 characters
            Allowed characters: a-z, A-Z, 0-9, -, and .; emojis cannot be used in keys
            DNS subdomain format (series of subdomain annotations separated by .)
            An annotation key name must adhere to the following restrictions:

            Length: 1-63 characters
            Allowed characters: a-z, A-Z, 0-9, -, _, and .; emojis cannot be used in keys
            Must begin and end with an alphanumeric character
            Annotation values
            Annotation values must adhere to the following restrictions:

            Length: 0-5000 unicode characters
      description: |
        Metadata is a JSON object that contains information about a resource. It includes the GUID of the resource, the time the resource was created, the time the resource was last updated, and links to the resource.
        Metadata is included in the response body of a request to retrieve a resource.
    role:
      allOf:
        - $ref: '#/components/schemas/baseSchema'
      type: object
      properties:
        type:
          type: string
          description: |-
            Role type. Possible values are:
            - `organization_user`: A user in the organization
            - `organization_auditor`: An auditor in the organization
            - `organization_manager`: A manager in the organization
            - `organization_billing_manager`: A billing manager in the organization
            - `space_auditor`: An auditor in the space
            - `space_developer`: A developer in the space
            - `space_manager`: A manager in the space
            - `space_supporter`: A supporter in the space (not authorized to use the V2 API)
          enum:
            - organization_user
            - organization_auditor
            - organization_manager
            - organization_billing_manager
            - space_auditor
            - space_developer
            - space_manager
            - space_supporter
        relationships:
          allOf:
            - $ref: '#/components/schemas/relationships'
          properties:
            organization:
              allOf:
                - $ref: '#/components/schemas/relationshipToOne'
                - description: |
                    A relationship to the organization the role controls access to; when this is a space role, `organization.data` will be `null`.
            space:
              allOf:
                - $ref: '#/components/schemas/relationshipToOne'
                - description: |
                    A relationship to the space the role controls access to; when this is an organization role, `space.data` will be `null`.
            user:
              allOf:
                - $ref: '#/components/schemas/relationshipToOne'
                - description: |
                    A relationship to the user; this is the user that has the role
      description: |
        Roles represent a set of permissions that can be granted to users. Roles are represented as a JSON object.
        A role consists of several required role fields and other attributes specific to the role.
        See Roles for specific roles.
    buildpack:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the buildpack
            stack:
              type: string
              description: The stack the buildpack is compatible with
            position:
              type: integer
              description: The position of the buildpack in the order of execution
            enabled:
              type: boolean
              description: Whether the buildpack is enabled
            locked:
              type: boolean
              description: Whether the buildpack is locked
            filename:
              type: string
              description: The filename of the buildpack
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
              properties:
                self:
                  allOf:
                    - $ref: '#/components/schemas/link'
                    - description: The URL of the buildpack
                upload:
                  allOf:
                    - $ref: '#/components/schemas/link'
                    - description: The URL to upload the buildpack
      description: A buildpack represents a set of scripts used to prepare an application for launch.
    buildpackList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/buildpack'
    stack:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the stack.
            description:
              type: string
              description: A description of the stack.
            build_rootfs_image:
              type: string
              description: The name of the stack image associated with staging/building Apps. If a stack does not have unique images, this will be the same as the stack name.
            run_rootfs_image:
              type: string
              description: The name of the stack image associated with running Apps. If a stack does not have unique images, this will be the same as the stack name.
            default:
              type: boolean
              description: Whether the stack is the default stack
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/link'
      description: A stack is a pre-built root filesystem that can be used to run applications.
    task:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the task.
            command:
              type: string
              description: The command to be executed by the task.
            state:
              type: string
              description: The current state of the task.
              enum:
                - RUNNING
                - SUCCEEDED
                - FAILED
            memory_in_mb:
              type: integer
              description: The amount of memory allocated to the task in megabytes.
            disk_in_mb:
              type: integer
              description: The amount of disk space allocated to the task in megabytes.
            result:
              type: object
              properties:
                failure_reason:
                  type: string
                  description: The reason for task failure, if applicable.
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/link'
      description: A task is a one-off process that can be run in the Cloud Foundry environment.
    user:
      type: object
      properties:
        guid:
          type: string
          description: Unique identifier for the user
        created_at:
          type: string
          format: date-time
          description: The time with zone when the object was created
        updated_at:
          type: string
          format: date-time
          description: The time with zone when the object was last updated
        username:
          type: string
          description: The username of the user
        presentation_name:
          type: string
          description: The presentation name of the user
        origin:
          type: string
          description: The origin of the user
        metadata:
          $ref: '#/components/schemas/metadata'
        links:
          $ref: '#/components/schemas/links'
    paginated_users:
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - type: object
          properties:
            pagination:
              $ref: '#/components/schemas/pagination'
            resources:
              type: array
              items:
                $ref: '#/components/schemas/user'
    userCreate:
      type: object
      properties:
        guid:
          type: string
          description: Unique identifier for the user
        created_at:
          type: string
          format: date-time
          description: The time with zone when the object was created
        updated_at:
          type: string
          format: date-time
          description: The time with zone when the object was last updated
        username:
          type: string
          description: The username of the user
        presentation_name:
          type: string
          description: The presentation name of the user
        origin:
          type: string
          description: The origin of the user
        metadata:
          $ref: '#/components/schemas/metadata'
        links:
          $ref: '#/components/schemas/links'
      required:
        - guid
    userUpdate:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        presentation_name:
          type: string
          description: The presentation name of the user
        origin:
          type: string
          description: The origin of the user
        metadata:
          $ref: '#/components/schemas/metadata'
        links:
          $ref: '#/components/schemas/links'
    droplet:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            state:
              type: string
              description: State of the droplet; valid states are AWAITING_UPLOAD, PROCESSING_UPLOAD, STAGED, COPYING, FAILED, or EXPIRED
            error:
              type: string
              description: A string describing the last error during the droplet lifecycle
            lifecycle:
              $ref: '#/components/schemas/lifecycle'
            execution_metadata:
              type: string
              description: Serialized JSON data resulting from staging for use when executing a droplet
            process_types:
              type: object
              description: The process types (keys) and associated start commands (values) that will be created when the droplet is executed
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
                - properties:
                    assign_current_droplet:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to assign the droplet to an application
                    download:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to download the droplet
            checksum:
              type: object
              properties:
                type:
                  type: string
                  description: Hashing algorithm for checksum; supported algorithms are sha256 and sha1
                value:
                  type: string
                  description: Checksum of the droplet
            buildpacks:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: System buildpack name
                  detect_output:
                    type: string
                    description: Output during buildpack detect process
                  version:
                    type: string
                    description: Version reported by the buildpack
                  buildpack_name:
                    type: string
                    description: Name reported by the buildpack
            stack:
              type: string
              description: The root filesystem to use with the buildpack, for example cflinuxfs4
            image:
              type: string
              description: Docker image name for Docker droplets
      description: A droplet is the result of staging an application package. There are two types (lifecycles) of droplets buildpack and docker. In the case of the buildpacks, the droplet contains the bits produced by the buildpack, typically application code and dependencies.
    dropletList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/droplet'
    lifecycle:
      type: object
      properties:
        type:
          type: string
          description: Type of the lifecycle; valid values are buildpack, cnb, docker
        data:
          type: object
          additionalProperties: true
          description: Data specific to the lifecycle
          properties:
            buildpacks:
              type: array
              items:
                type: string
              description: List of the names of buildpacks, URLs from which they may be downloaded, or null to auto-detect a suitable buildpack during staging (applicable for buildpack and cnb lifecycles)
            stack:
              type: string
              description: The root filesystem to use with the buildpack, for example cflinuxfs4 (applicable for buildpack lifecycle)
            credentials:
              type: object
              additionalProperties:
                type: object
                properties:
                  username:
                    type: string
                  password:
                    type: string
                  token:
                    type: string
              description: Credentials used to download the configured buildpacks (applicable for cnb lifecycle)
      description: >
        The lifecycle type defines how the application droplet is created and run. The following lifecycle types are supported: - buildpack: Traditional buildpacks for Cloud Foundry applications. - cnb: Cloud Native Buildpacks that are OCI-compliant. - docker: Run pre-built Docker images.

    domain:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the domain; must be between 3-253 characters and follow RFC 1035
            internal:
              type: boolean
              description: Whether the domain is used for internal (container-to-container) traffic
            router_group:
              type: object
              properties:
                guid:
                  type: string
                  format: uuid
                  description: The GUID of the router group to route TCP traffic through
              description: The router group that the domain will use for TCP traffic
            supported_protocols:
              type: array
              items:
                type: string
              description: Available protocols for routes using the domain, currently http and tcp
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              $ref: '#/components/schemas/links'
      description: |
        A domain is a fully qualified domain name that is used for application routes. A domain can be scoped to an organization, meaning it can be used to create routes for spaces inside that organization, or be left unscoped to allow all organizations access.
    domainList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/domain'
    environmentVariableGroup:
      type: object
      properties:
        updated_at:
          type: string
          format: date-time
          description: The time the environment variable group was last updated
        name:
          type: string
          description: The name of the group; can only be "running" or "staging"
        var:
          type: object
          additionalProperties:
            type: string
          description: Environment variables to inject; keys and values must be strings
        links:
          $ref: '#/components/schemas/links'
      description: >
        Environment variable groups allow platform operators/admins to manage environment variables across all apps in a Cloud Foundry foundation. Variables in the running environment variable group will be injected into all running app containers. Variables in the staging environment variable group will be injected into the staging container for all apps while they are being staged.
    deployment:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            status:
              type: object
              properties:
                value:
                  type: string
                  description: The current status of the deployment; valid values are ACTIVE (in progress) and FINALIZED (finished, either successfully or not)
                reason:
                  type: string
                  description: The reason for the status of the deployment
                details:
                  type: object
                  properties:
                    last_successful_healthcheck:
                      type: string
                      format: date-time
                      description: Timestamp of the last successful health check
                    last_status_change:
                      type: string
                      format: date-time
                      description: Timestamp of last change to status.value or status.reason
            strategy:
              type: string
              description: Strategy used for the deployment; supported strategies are rolling and canary (experimental)
            options:
              type: object
              properties:
                max_in_flight:
                  type: integer
                  description: The maximum number of new instances to deploy simultaneously
            droplet:
              $ref: '#/components/schemas/relationshipToOne'
            previous_droplet:
              $ref: '#/components/schemas/relationshipToOne'
            new_processes:
              type: array
              items:
                type: object
                properties:
                  guid:
                    type: string
                    format: uuid
                    description: The GUID of the new process created as part of the deployment
                  type:
                    type: string
                    description: The type of the new process created as part of the deployment
            revision:
              type: object
              properties:
                guid:
                  type: string
                  format: uuid
                  description: The revision the deployment is transitioning the app to
                version:
                  type: integer
                  description: The version of the revision
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              $ref: '#/components/schemas/links'
      description: >
        Deployments are objects that manage updates to applications with zero downtime. They can either: - Manage updating an app’s droplet directly after an application package is staged - Roll an app back to a specific revision along with its associated droplet

        Deployment strategies supported: - Rolling deployments allow for applications to be deployed without incurring downtime by gradually rolling out instances. Max-in-flight can be configured to specify how many instances are rolled out simultaneously. - Canary deployments deploy a single instance and pause for user evaluation. If the canary instance is deemed successful, the deployment can be resumed via the continue action. The deployment then continues like a rolling deployment. This feature is experimental and is subject to change.

    deploymentList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/deployment'
    featureFlag:
      type: object
      properties:
        name:
          type: string
          description: The name of the feature flag
        enabled:
          type: boolean
          description: Whether the feature flag is enabled
        updated_at:
          type: string
          format: date-time
          description: The time the feature flag was last updated; this will be blank for feature flags that have not been configured
        custom_error_message:
          type: string
          description: The error string returned by the API when a client performs an action disabled by the feature flag
        links:
          $ref: '#/components/schemas/links'
      description: >
        Feature flags are runtime flags that enable or disable functionality on the API.

    featureFlagList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/featureFlag'
    build:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            state:
              type: string
              description: State of the build; valid states are STAGING, STAGED, or FAILED
            staging_memory_in_mb:
              type: integer
              description: Memory in MB allocated for staging of the build
            staging_disk_in_mb:
              type: integer
              description: Disk space in MB allocated for staging of the build
            staging_log_rate_limit_bytes_per_second:
              type: integer
              description: Log rate limit in bytes per second allocated for staging of the build
            error:
              type: string
              description: A string describing errors during the build process
            lifecycle:
              $ref: '#/components/schemas/lifecycle'
            checksum:
              type: object
              properties:
                type:
                  type: string
                  description: Hashing algorithm for checksum; supported algorithms are sha256 and sha1
                value:
                  type: string
                  description: Checksum of build
            metadata:
              $ref: '#/components/schemas/metadata'
            relationships:
              $ref: '#/components/schemas/relationships'
            droplet:
              $ref: '#/components/schemas/relationshipToOne'
            created_by:
              type: object
              properties:
                guid:
                  type: string
                  description: The GUID of the user that created the build
                name:
                  type: string
                  description: The name of the user that created the build
                email:
                  type: string
                  description: The email of the user that created the build
            links:
              $ref: '#/components/schemas/links'
      description: >
        Builds represent the process of transforming source code into a runnable artifact. Builds can be triggered manually or automatically as part of the app lifecycle. A successful build results in a droplet that can be used to run the app.

    buildList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/build'
    auditEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            type:
              type: string
              description: The type of the event
            actor:
              type: object
              properties:
                guid:
                  type: string
                  description: The unique identifier for the actor (user or system resource that performed the action)
                type:
                  type: string
                  description: The actor type
                name:
                  type: string
                  description: The name of the actor
            target:
              type: object
              properties:
                guid:
                  type: string
                  description: The unique identifier for the target (resource that the event acted upon)
                type:
                  type: string
                  description: The target type
                name:
                  type: string
                  description: The name of the target
            data:
              type: object
              description: Additional information about the event
            space:
              type: object
              properties:
                guid:
                  type: string
                  description: The unique identifier for the space where the event occurred
            organization:
              type: object
              properties:
                guid:
                  type: string
                  description: The unique identifier for the organization where the event occurred
            links:
              $ref: '#/components/schemas/links'
      description: >
        Audit events help Cloud Foundry operators monitor actions taken against resources (such as apps) via user or system actions.

    auditEventList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/auditEvent'
    appFeature:
      type: object
      properties:
        name:
          type: string
          description: The name of the app feature
        description:
          type: string
          description: The description of the app feature
        enabled:
          type: boolean
          description: Whether the app feature is enabled
      description: >
        App features are used to manage whether optional capabilities are enabled for a given application.

    appFeatureList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/appFeature'
    app:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the app
            state:
              type: string
              description: Current desired state of the app; valid values are STOPPED or STARTED
            lifecycle:
              $ref: '#/components/schemas/lifecycle'
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
      description: >
        Apps represent the core entities in the Cloud Foundry environment. They are the deployable units that run your code. Each app can have multiple processes, routes, and services associated with it. Apps can be scaled horizontally by increasing the number of instances. They can also be updated and restarted as needed.

    appList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/app'
    route:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            protocol:
              type: string
              description: Protocol used by the route; valid values are http1, http2, and tcp
            host:
              type: string
              description: The hostname for the route; can be null for TCP routes
            path:
              type: string
              description: The path for the route; must start with a slash / and be less than 128 characters
            port:
              type: integer
              description: The port for the route; can be null if not specified
            url:
              type: string
              description: Fully qualified path or address where the route directs traffic
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              $ref: '#/components/schemas/links'
        - description: A route in Cloud Foundry is used to direct traffic from a URL to an application.
    routeDestination:
      type: object
      properties:
        guid:
          type: string
          format: uuid
          description: Unique identifier for the destination
        app:
          type: object
          properties:
            guid:
              type: string
              format: uuid
              description: GUID of the app
            process:
              type: object
              properties:
                type:
                  type: string
                  description: Process type
                guid:
                  type: string
                  format: uuid
                  description: GUID of the process
          description: App to which the route destination directs traffic
        weight:
          type: integer
          description: >-
            Weight of the destination. Routes will equally distribute the traffic to all destinations with the same weight.
        port:
          type: integer
          description: Port of the destination that receives traffic.
        protocol:
          type: string
          description: >-
            Protocol of the destination that receives traffic. Defaults to 'http1' when not specified for HTTP routes, and is ignored for TCP routes.
          enum:
            - http1
            - http2
        created_at:
          type: string
          format: date-time
          description: The time with zone when the object was created
        updated_at:
          type: string
          format: date-time
          description: The time with zone when the object was last updated
        metadata:
          $ref: '#/components/schemas/metadata'
        links:
          $ref: '#/components/schemas/links'
      description: A route destination is a specification for where traffic on a route should be directed.
    routeDestinationList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/routeDestination'
      description: A list of route destinations
    revision:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            version:
              type: integer
              description: Version number of the revision
            description:
              type: string
              description: Description of the revision, created by the user
            droplet:
              $ref: '#/components/schemas/relationshipToOne'
            relationships:
              allOf:
                - $ref: '#/components/schemas/relationships'
                - properties:
                    app:
                      $ref: '#/components/schemas/relationshipToOne'
            enabled:
              type: boolean
              description: Whether the revision is enabled or not.
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
                - properties:
                    environment_variables:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: Link to the revision's environment variables
      description: 'An App Revision is an immutable snapshot of an app at a particular point in time. Revisions are identified by a sequential version number. The "current" revision for an app is the revision that is currently deployed for all instances of the app.'
    revisionList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/revision'
    package:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            type:
              type: string
              description: Type of the package; valid values are bits or docker
              enum:
                - bits
                - docker
            data:
              type: object
              description: Data for package type
              properties:
                error:
                  type: string
                  description: If an error occurs this field will contain the error message
                checksum:
                  type: object
                  properties:
                    type:
                      type: string
                      description: The checksum type, for example sha256
                    value:
                      type: string
                      description: The checksum value; this will be populated after bits are uploaded
                image:
                  type: string
                  description: The registry address of the image
                username:
                  type: string
                  description: The username for the image's registry
                password:
                  type: string
                  description: The password for the image's registry
            state:
              type: string
              description: State of the package; valid states are AWAITING_UPLOAD, PROCESSING_UPLOAD, READY, FAILED, COPYING, or EXPIRED
              enum:
                - AWAITING_UPLOAD
                - PROCESSING_UPLOAD
                - READY
                - FAILED
                - COPYING
                - EXPIRED
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
                - properties:
                    upload:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to upload the package bits
                    download:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to download the package bits
                    stage:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to stage the package
      description: 'A package represents an application"s "source code" - either raw bits or a pointer to these bits. Packages are used to create builds, which result in a droplet that can be deployed.'
    packageList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/package'
    job:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            operation:
              type: string
              description: The type of operation the job is performing
            state:
              type: string
              description: The current state of the job
              enum:
                - PROCESSING
                - COMPLETE
                - FAILED
                - POLLING
            errors:
              type: array
              description: Any errors encountered during job execution
              items:
                $ref: '#/components/schemas/error'
            warnings:
              type: array
              description: Any warnings encountered during job execution
              items:
                $ref: '#/components/schemas/warning'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
      description: 'Jobs are created by the platform when performing certain asynchronous actions. Asynchronous jobs are commonly used for long-running tasks such as uploading large files, staging applications, or deleting resources.'
    error:
      type: object
      properties:
        code:
          type: integer
          description: A numeric code for this error
        detail:
          type: string
          description: Detailed description of the error
        title:
          type: string
          description: Name of the error
    warning:
      type: object
      properties:
        detail:
          type: string
          description: Description of the warning
    jobList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/job'
    appUsageEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
      properties:
        state:
          type: object
          properties:
            current:
              type: string
              default: null
            previous:
              type: string
              default: null
        app:
          type: object
          properties:
            guid:
              type: string
              default: null
            name:
              type: string
              default: null
        process:
          type: object
          properties:
            guid:
              type: string
              default: null
            type:
              type: string
              default: null
        space:
          type: object
          properties:
            guid:
              type: string
              default: null
            name:
              type: string
              default: null
        organization:
          type: object
          properties:
            guid:
              type: string
              default: null
        buildpack:
          type: object
          properties:
            guid:
              type: string
              default: null
            name:
              type: string
              default: null
        task:
          type: object
          properties:
            guid:
              type: string
              default: null
            name:
              type: string
              default: null
        memory_in_mb_per_instance:
          type: object
          properties:
            current:
              type: integer
              default: null
            previous:
              type: integer
              default: null
        instance_count:
          type: object
          properties:
            current:
              type: integer
              default: null
            previous:
              type: integer
              default: null
      description: >-
        App usage events are a record of changes in the usage of apps and tasks. Examples include starting an application, scaling an application (from, say, one to three instances), and stopping an application.

        Usage events are typically used by billing and chargeback applications.
    appUsageEventList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/appUsageEvent'
    isolationSegment:
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the isolation segment
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
                - properties:
                    organizations:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The organizations assigned to this isolation segment
      description: An isolation segment provides a dedicated pool of compute resources for an organization or space.
    isolationSegmentList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/isolationSegment'
  securitySchemes:
    oauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://uaa.cloudfoundry.local/api-oauth/dialog
          scopes:
            cloud_controller.admin: This scope provides read and write access to all resources
            cloud_controller.admin_read_only: This scope provides read only access to all resources
            cloud_controller.global_auditor: This scope provides read access to all resources
            cloud_controller.read: Read access to the Cloud Controller
            cloud_controller.write: Write access to the Cloud Controller
            cloud_controller.update_build_state: This scope allows its bearer to update the state of a build; currently only used when updating builds
            cloud_controller_service_permissions.read: This scope provides read only access for service instance permissions
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer JWT token authentication
  parameters:
    guid:
      name: guid
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: The GUID of the resource
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
      description: Page to display; valid values are integers >= 1
    perPage:
      name: perPage
      in: query
      required: false
      schema:
        type: integer
      description: Number of results per page, valid values are 1 through 5000
    orderBy:
      name: order_by
      in: query
      required: false
      schema:
        type: string
      description: |
        Order results by a specific field. Prepend with - to sort descending.
    createdAts:
      name: created_ats
      in: query
      required: false
      schema:
        type: string
      description: |
        Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed.
    updatedAts:
      name: updated_ats
      in: query
      required: false
      schema:
        type: string
      description: |
        Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed.
    labelSelector:
      name: label_selector
      in: query
      description: |
        Selectors allow users to filter and group API resources by the labels applied to them. A selector consists of one or more requirements in a comma-delimited list. The maximum number of requirements in a single selector is 50.

        Example label selector:
        `cf curl /v3/apps?label_selector=env=dev,%21chargeback-code,tier%20in%20%28backend,worker%29`

        Selectors can be used to filter and group resources using the query parameter `label_selector` on list endpoints.

        When included in a URL, the selector must be appropriately escaped.

        A requirement consists of a key, an operator, and optional value(s).

        | Requirement    | Format                        | Description                                                                 |
        |----------------|-------------------------------|-----------------------------------------------------------------------------|
        | existence      | `key`                         | Returns all resources that have been assigned a label with the given key (with any value) |
        | non-existence  | `!key`                        | Returns all resources that have not been assigned a label with the given key (with any value) |
        | equality       | `key=value` or `key==value`   | Returns all resources that have been assigned a label with the given key and value |
        | inequality     | `key!=value`                  | Returns all resources that either have not been assigned a label with the given key or have a label with the given key but a different value |
        | set inclusion  | `key in (value1,value2…)`     | Returns all resources that have been assigned a label with the given key with one of the specified value(s) |
        | set exclusion  | `key notin (value1,value2…)`  | Returns all resources that either have not been assigned a label with the given key or have a label with the given key but none of the specified value(s) |
      required: false
      schema:
        type: string
    dropletGuid:
      name: droplet_guid
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: The GUID of the droplet
    entityType:
      name: entity_type
      in: query
      required: false
      schema:
        type: string
      description: >
        The type of the entity involved in the audit event. This can be used to filter audit events by the entity involved. For example, filtering by `type` can return audit events involving only apps, spaces, or organizations.

  responses:
    401Unauthorized:
      description: Unauthorized
    403Forbidden:
      description: Forbidden
    500Unauthorized:
      description: Internal Server Error
    buildpackCreateResponse:
      description: Successfully created buildpack
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/buildpack'
          examples:
            buildpack:
              summary: A sample buildpack
              value:
                guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                created_at: "2023-10-01T12:00:00Z"
                updated_at: "2023-10-01T12:00:00Z"
                name: ruby_buildpack
                stack: cflinuxfs3
                position: 1
                enabled: true
                locked: false
                state: AWAITING_UPLOAD
                filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                links:
                  self:
                    href: https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                  upload:
                    href: https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                    method: POST
                metadata:
                  labels:
                    some: label
                  annotations:
                    some: annotation
    buildpackGetResponse:
      description: Successfully retrieved buildpack
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/buildpack'
          examples:
            buildpack:
              summary: A sample buildpack
              value:
                guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                created_at: "2023-10-01T12:00:00Z"
                updated_at: "2023-10-01T12:00:00Z"
                name: ruby_buildpack
                stack: cflinuxfs3
                position: 1
                enabled: true
                locked: false
                state: AWAITING_UPLOAD
                filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                links:
                  self:
                    href: https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                  upload:
                    href: https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                    method: POST
                metadata:
                  labels:
                    some: label
                  annotations:
                    some: annotation
    userCreateResponse:
      description: User created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    userUpdateResponse:
      description: User updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    dropletCreateResponse:
      description: Successfully created droplet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/droplet'
    dropletGetResponse:
      description: Successfully retrieved droplet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/droplet'
    dropletListResponse:
      description: Successfully retrieved list of droplets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/dropletList'
    routeCreateResponse:
      description: Successfully created route
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/route'
    routeListResponse:
      description: Successfully retrieved list of routes
      content:
        application/json:
          schema:
            type: object
            properties:
              pagination:
                $ref: '#/components/schemas/pagination'
              resources:
                type: array
                items:
                  $ref: '#/components/schemas/route'
    RoleCreateResponse:
      description: Role created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/role'
    RoleGetResponse:
      description: Role retrieved
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/role'
    RoleListResponse:
      description: Roles retrieved
      content:
        application/json:
          schema:
            type: object
            properties:
              pagination:
                $ref: '#/components/schemas/pagination'
              resources:
                type: array
                items:
                  $ref: '#/components/schemas/role'
  requestBodies:
    buildpackCreateRequestBody:
      description: Buildpack object that needs to be added
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the buildpack
              stack:
                type: string
                description: The stack the buildpack is compatible with
              position:
                type: integer
                description: The position of the buildpack in the order of execution
              state:
                type: string
                description: The state of the buildpack
                enum:
                  - AWAITING_UPLOAD
                  - READY
              enabled:
                type: boolean
                description: Whether the buildpack is enabled
              locked:
                type: boolean
                description: Whether the buildpack is locked
              filename:
                type: string
                description: The filename of the buildpack
            required:
              - name
            description: Request schema for creating a buildpack
          examples:
            buildpack:
              summary: A sample buildpack
              value:
                name: ruby_buildpack
                stack: cflinuxfs3
                position: 1
                enabled: true
                state: AWAITING_UPLOAD
                locked: false
                filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
    userCreate:
      description: User to create
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userCreate'
    userUpdate:
      description: User to update
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userUpdate'
    dropletCreateRequestBody:
      description: Droplet object that needs to be created
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              relationships:
                $ref: '#/components/schemas/relationships'
              process_types:
                type: object
                description: Process names and start commands for the droplet
            required:
              - relationships
            description: Request schema for creating a droplet
    routeCreateRequestBody:
      description: Route object that needs to be added
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              protocol:
                type: string
                description: Protocol used by the route; valid values are http1, http2, and tcp
                example: http1
              host:
                type: string
                description: Hostname of the route; can be null for TCP routes
                example: my-app
              path:
                type: string
                description: Path of the route; must start with a slash /.
                example: /my-path
              port:
                type: integer
                description: Port of the route; can be null if not specified
                example: 8080
              relationships:
                $ref: '#/components/schemas/relationships'
            required:
              - protocol
              - relationships
            description: Request schema for creating a route
    routeDestinations:
      description: Route destination to create
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                app:
                  type: object
                  properties:
                    guid:
                      type: string
                      format: uuid
                      description: App GUID
                    process:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Process type
                        guid:
                          type: string
                          format: uuid
                          description: Process GUID
                  description: >-
                    App to which the route destination directs traffic. Must provide either app or service instance.
                service_instance:
                  type: object
                  properties:
                    guid:
                      type: string
                      format: uuid
                      description: Service Instance GUID
                  description: >-
                    Service instance to which the route destination directs traffic. Must provide either app or service instance.
                weight:
                  type: integer
                  description: >-
                    Weight of the destination. Routes will equally distribute the traffic to all destinations with the same weight.
                port:
                  type: integer
                  description: Port of the destination that receives traffic.
                protocol:
                  type: string
                  description: >-
                    Protocol of the destination that receives traffic. Defaults to 'http1' when not specified for HTTP routes, and is ignored for TCP routes.
                  enum:
                    - http1
                    - http2
              required:
                - app
              description: Request schema for creating a route destination
            description: List of route destinations
    RoleCreate:
      description: Role to create
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                description: Role type
                enum:
                  - organization_user
                  - organization_auditor
                  - organization_manager
                  - organization_billing_manager
                  - space_auditor
                  - space_developer
                  - space_manager
                  - space_supporter
              relationships:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/relationshipToOne'
                  organization:
                    $ref: '#/components/schemas/relationshipToOne'
                  space:
                    $ref: '#/components/schemas/relationshipToOne'
    revisionUpdateRequestBody:
      description: Revision object that needs to be updated
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              description:
                type: string
                description: Description of the revision
              enabled:
                type: boolean
                description: Whether the revision is enabled
              metadata:
                $ref: '#/components/schemas/metadata'
            description: Request schema for updating a revision
    packageCreateRequestBody:
      description: Package object that needs to be created
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type of the package; valid values are bits or docker
                enum:
                  - bits
                  - docker
              data:
                type: object
                description: Data for package type
                properties:
                  image:
                    type: string
                    description: The registry address of the image (for docker type)
                  username:
                    type: string
                    description: The username for the image's registry (for docker type)
                  password:
                    type: string
                    description: The password for the image's registry (for docker type)
              relationships:
                $ref: '#/components/schemas/relationships'
              metadata:
                $ref: '#/components/schemas/metadata'
            required:
              - type
              - relationships
            description: Request schema for creating a package
    packageUpdateRequestBody:
      description: Package object that needs to be updated
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/metadata'
            description: Request schema for updating a package
    packageUploadRequestBody:
      description: The package bits to be uploaded
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              bits:
                type: string
                format: binary
                description: A binary zip file containing the package bits
              resources:
                type: array
                items:
                  type: object
                  description: Fingerprints of the application bits that have previously been pushed to Cloud Foundry, formatted as resource match objects
            required:
              - bits
            description: Request schema for uploading a package
    isolationSegmentCreate:
      description: Isolation Segment to create
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the isolation segment
              metadata:
                $ref: '#/components/schemas/metadata'
            required:
              - name
paths:
  /v3/buildpacks:
    post:
      tags:
        - Buildpacks
      summary: Create a buildpack
      description: Create a new buildpack
      operationId: createBuildpack
      requestBody:
        $ref: '#/components/requestBodies/buildpackCreateRequestBody'
      responses:
        "201":
          $ref: '#/components/responses/buildpackCreateResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFUserInvalid
      security:
        - oauth:
            - cloud_controller.write
    get:
      tags:
        - Buildpacks
      summary: List buildpacks
      description: Retrieve a list of buildpacks available in the system.
      operationId: listBuildpacks
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: name
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of buildpack names to filter by

        - name: stacks
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of stacks to filter by

      responses:
        "200":
          description: List of buildpacks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildpackList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
  /v3/buildpacks/{guid}:
    get:
      tags:
        - Buildpacks
      summary: Retrieve a buildpack
      description: Retrieve details of a specific buildpack by its GUID.
      operationId: getBuildpack
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          $ref: '#/components/responses/buildpackGetResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Buildpacks
      summary: Update a buildpack
      description: Update attributes of a specific buildpack by its GUID.
      operationId: ppdateBuildpack
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Buildpack object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the buildpack
                stack:
                  type: string
                  description: The stack the buildpack is compatible with
                position:
                  type: integer
                  description: The position of the buildpack in the order of execution
                enabled:
                  type: boolean
                  description: Whether the buildpack is enabled
                locked:
                  type: boolean
                  description: Whether the buildpack is locked
                filename:
                  type: string
                  description: The filename of the buildpack
              required:
                - name
              description: Request schema for updating a buildpack
            examples:
              buildpack:
                summary: A sample buildpack
                value:
                  name: ruby_buildpack
                  stack: cflinuxfs3
                  position: 1
                  enabled: true
                  locked: false
                  filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
      responses:
        "200":
          description: Successfully updated buildpack
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildpack'
              examples:
                buildpack:
                  summary: A sample buildpack
                  value:
                    guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                    created_at: "2023-10-01T12:00:00Z"
                    updated_at: "2023-10-01T12:00:00Z"
                    name: ruby_buildpack
                    stack: cflinuxfs3
                    position: 1
                    enabled: true
                    locked: false
                    filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                    links:
                      self:
                        href: https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                      upload:
                        href: https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                        method: POST
                    metadata:
                      labels:
                        some: label
                      annotations:
                        some: annotation
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFUserInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Buildpacks
      summary: Delete a buildpack
      description: Delete a specific buildpack by its GUID.
      operationId: deleteBuildpack
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "204":
          description: Successfully deleted buildpack
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/buildpacks/{guid}/upload:
    post:
      tags:
        - Buildpacks
      summary: Upload a buildpack
      description: Upload a buildpack file for a specific buildpack by its GUID.
      operationId: uploadBuildpack
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: The buildpack file to be uploaded
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bits:
                  type: string
                  format: binary
                  description: The buildpack file to be uploaded
              required:
                - bits
              description: Request schema for uploading a buildpack
      responses:
        "200":
          description: Successfully uploaded buildpack
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildpack'
              examples:
                buildpack:
                  summary: A sample buildpack
                  value:
                    guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                    created_at: "2023-10-01T12:00:00Z"
                    updated_at: "2023-10-01T12:00:00Z"
                    name: ruby_buildpack
                    stack: cflinuxfs3
                    position: 1
                    enabled: true
                    locked: false
                    filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                    links:
                      self:
                        href: https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                      upload:
                        href: https://api.example.local/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                        method: POST
                    metadata:
                      labels:
                        some: label
                      annotations:
                        some: annotation
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/users:
    get:
      tags: [Users]
      summary: List users
      description: Retrieve all users the user has access to.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - name: guids
          in: query
          description: Comma-delimited list of user guids to filter by
          required: false
          schema:
            type: array
            items:
              type: string
        - name: usernames
          in: query
          description: Comma-delimited list of usernames to filter by
          required: false
          schema:
            type: array
            items:
              type: string
        - name: origins
          in: query
          description: Comma-delimited list of user origins to filter by
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paginated_users'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *500CFServerError
      operationId: listUsers
    post:
      tags:
        - Users
      summary: Create a user
      description: Create a new user.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/userCreate'
      responses:
        "201":
          $ref: '#/components/responses/userCreateResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFUserInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
  /v3/users/{guid}:
    get:
      tags: [Users]
      summary: Get a user
      description: Retrieve a user by its GUID.
      operationId: getUser
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *401CFNotAuthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *403CFNotAuthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *500CFServerError
    patch:
      tags:
        - Users
      summary: Update a user
      description: Update an existing user.
      operationId: updateUser
      security:
        - oauth:
            - cloud_controller.write
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/userUpdate'
      responses:
        "200":
          $ref: '#/components/responses/userUpdateResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFUserInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "500":
          $ref: '#/components/responses/500Unauthorized'
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Delete a user by its GUID.
      operationId: deleteUser
      security:
        - oauth:
            - cloud_controller.write
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "500":
          $ref: '#/components/responses/500Unauthorized'
  /v3/droplets:
    post:
      tags:
        - Droplets
      summary: Create a droplet
      description: Create a new droplet
      operationId: createDroplet
      requestBody:
        $ref: '#/components/requestBodies/dropletCreateRequestBody'
      responses:
        "201":
          $ref: '#/components/responses/dropletCreateResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
      security:
        - oauth:
            - cloud_controller.write
    get:
      tags:
        - Droplets
      summary: List droplets
      description: Retrieve a list of droplets available in the system.
      operationId: listDroplets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of droplet GUIDs to filter by

        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of droplet states to filter by

        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of app GUIDs to filter by

        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of space GUIDs to filter by

        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of organization GUIDs to filter by

      responses:
        "200":
          $ref: '#/components/responses/dropletListResponse'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
  /v3/droplets/{droplet_guid}:
    get:
      tags:
        - Droplets
      summary: Retrieve a droplet
      description: Retrieve details of a specific droplet by its GUID.
      operationId: getDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      responses:
        "200":
          $ref: '#/components/responses/dropletGetResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Droplets
      summary: Update a droplet
      description: Update attributes of a specific droplet by its GUID.
      operationId: updateDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      requestBody:
        description: Droplet object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/metadata'
                image:
                  type: string
                  description: Image reference where the built complete image was stored
              required:
                - image
              description: Request schema for updating a droplet
      responses:
        "200":
          $ref: '#/components/responses/dropletGetResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Droplets
      summary: Delete a droplet
      description: Delete a specific droplet by its GUID.
      operationId: deleteDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      responses:
        "204":
          description: Successfully deleted droplet
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/droplets/{droplet_guid}/download:
    get:
      tags:
        - Droplets
      summary: Download a droplet
      description: Download a droplet file by its GUID.
      operationId: downloadDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      responses:
        "302":
          description: Redirect to download location
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
  /v3/droplets/{droplet_guid}/upload:
    post:
      tags:
        - Droplets
      summary: Upload a droplet
      description: Upload a droplet file for a specific droplet by its GUID.
      operationId: uploadDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      requestBody:
        description: The droplet file to be uploaded
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bits:
                  type: string
                  format: binary
                  description: The droplet file to be uploaded
              required:
                - bits
              description: Request schema for uploading a droplet
      responses:
        "200":
          $ref: '#/components/responses/dropletGetResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/domains:
    get:
      tags:
        - Domains
      summary: List domains
      description: Retrieve a list of all domains the user has access to.
      operationId: listDomains
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of GUIDs to filter by
        - name: names
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of domain names to filter by
        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of owning organization GUIDs to filter by
      responses:
        "200":
          description: List of domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domainList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - Domains
      summary: Create a domain
      description: Create a new domain.
      operationId: createDomain
      requestBody:
        description: Domain object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the domain
                internal:
                  type: boolean
                  description: Whether the domain is used for internal (container-to-container) traffic
                router_group:
                  type: object
                  properties:
                    guid:
                      type: string
                      format: uuid
                      description: The desired router group GUID
                organization:
                  $ref: '#/components/schemas/relationshipToOne'
                shared_organizations:
                  $ref: '#/components/schemas/relationshipToMany'
                metadata:
                  $ref: '#/components/schemas/metadata'
              required:
                - name
                - internal
      responses:
        "201":
          description: Successfully created domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFDomainInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/domains/{guid}:
    get:
      tags:
        - Domains
      summary: Retrieve a domain
      description: Retrieve details of a specific domain by its GUID.
      operationId: getDomain
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully retrieved domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFDomainInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFDomainNotFound
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Domains
      summary: Update a domain
      description: Update attributes of a specific domain by its GUID.
      operationId: updateDomain
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Domain object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/metadata'
              description: Request schema for updating a domain
      responses:
        "200":
          description: Successfully updated domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFDomainInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFDomainNotFound
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Domains
      summary: Delete a domain
      description: Delete a specific domain by its GUID.
      operationId: deleteDomain
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "204":
          description: Successfully deleted domain
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFDomainInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFDomainNotFound
      security:
        - oauth:
            - cloud_controller.write
  /v3/domains/{guid}/relationships/shared_organizations:
    post:
      tags:
        - Domains
      summary: Share a domain
      description: Share an organization-scoped domain to other organizations specified by a list of organization GUIDs.
      operationId: shareDomain
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: List of organizations to share the domain with
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/relationship'
              description: Organization relationships; each organization will be entitled to manage this isolation segment
      responses:
        "200":
          description: Successfully shared domain
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/relationship'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFDomainInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFDomainNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
  /v3/domains/{guid}/relationships/shared_organizations/{org_guid}:
    delete:
      tags:
        - Domains
      summary: Unshare a domain
      description: Unshare a domain from a specific organization.
      operationId: unshareDomain
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: org_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the organization to unshare the domain from
      responses:
        "204":
          description: Successfully unshared domain
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFDomainInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Domain or organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFDomainNotFound
                  - <<: *404CFOrganizationNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
  /v3/organizations/{org_guid}/domains:
    get:
      tags:
        - Domains
      summary: List domains for an organization
      description: Retrieve a list of all domains available in an organization for the current user.
      operationId: listDomainsForOrganization
      parameters:
        - name: org_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of GUIDs to filter by
        - name: names
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of domain names to filter by
      responses:
        "200":
          description: List of domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domainList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.read
  /v3/organizations/{org_guid}/domains/default:
    get:
      tags:
        - Domains
      summary: Get the default domain
      description: Retrieve the default domain for a given organization.
      operationId: getDefaultDomain
      parameters:
        - name: org_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved default domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFDomainNotFound
      security:
        - oauth:
            - cloud_controller.read
  /v3/environment_variable_groups/running:
    get:
      tags:
        - EnvironmentVariableGroups
      summary: Get running environment variable group
      description: Retrieve the environment variable group for running applications.
      operationId: getRunningEnvironmentVariableGroup
      responses:
        "200":
          description: Successfully retrieved running environment variable group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentVariableGroup'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - EnvironmentVariableGroups
      summary: Update running environment variable group
      description: Update the environment variable group for running applications.
      operationId: updateRunningEnvironmentVariableGroup
      requestBody:
        description: The environment variables to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                var:
                  type: object
                  additionalProperties:
                    type: string
                  description: Environment variables to inject; keys and values must be strings
      responses:
        "200":
          description: Successfully updated running environment variable group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentVariableGroup'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFEnvironmentVariableGroupInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/environment_variable_groups/staging:
    get:
      tags:
        - EnvironmentVariableGroups
      summary: Get staging environment variable group
      description: Retrieve the environment variable group for staging applications.
      operationId: getStagingEnvironmentVariableGroup
      responses:
        "200":
          description: Successfully retrieved staging environment variable group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentVariableGroup'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - EnvironmentVariableGroups
      summary: Update staging environment variable group
      description: Update the environment variable group for staging applications.
      operationId: updateStagingEnvironmentVariableGroup
      requestBody:
        description: The environment variables to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                var:
                  type: object
                  additionalProperties:
                    type: string
                  description: Environment variables to inject; keys and values must be strings
      responses:
        "200":
          description: Successfully updated staging environment variable group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentVariableGroup'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFEnvironmentVariableGroupInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/deployments:
    get:
      tags:
        - Deployments
      summary: List deployments
      description: Retrieve a list of all deployments the user has access to.
      operationId: listDeployments
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app GUIDs to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of deployment states to filter by
        - name: status_reasons
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of status reasons to filter by; valid values include DEPLOYING, PAUSED, CANCELING, DEPLOYED, CANCELED, SUPERSEDED
        - name: status_values
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of status values to filter by; valid values include ACTIVE and FINALIZED
      responses:
        "200":
          description: List of deployments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploymentList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - Deployments
      summary: Create a deployment
      description: Create a new deployment.
      operationId: createDeployment
      requestBody:
        description: Deployment object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationships:
                  $ref: '#/components/schemas/relationships'
                strategy:
                  type: string
                droplet:
                  $ref: '#/components/schemas/relationship'
                revision:
                  $ref: '#/components/schemas/relationship'
                options:
                  type: object
                  properties:
                    max_in_flight:
                      type: integer
                      description: The maximum number of new instances to deploy simultaneously
                metadata:
                  $ref: '#/components/schemas/metadata'
      responses:
        "201":
          description: Successfully created deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/deployments/{guid}:
    get:
      tags:
        - Deployments
      summary: Retrieve a deployment
      description: Retrieve details of a specific deployment by its GUID.
      operationId: getDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully retrieved deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *403CFDeploymentsDisabled
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Deployments
      summary: Update a deployment
      description: Update attributes of a specific deployment by its GUID.
      operationId: updateDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Deployment object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/metadata'
              description: Request schema for updating a deployment
      responses:
        "200":
          description: Successfully updated deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *403CFDeploymentsDisabled
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Deployments
      summary: Delete a deployment
      description: Delete a specific deployment by its GUID.
      operationId: deleteDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "204":
          description: Successfully deleted deployment
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *403CFDeploymentsDisabled
      security:
        - oauth:
            - cloud_controller.write
  /v3/deployments/{guid}/actions/cancel:
    post:
      tags:
        - Deployments
      summary: Cancel a deployment
      description: Cancel a deployment in progress.
      operationId: cancelDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully canceled deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *403CFDeploymentsDisabled
      security:
        - oauth:
            - cloud_controller.write
  /v3/deployments/{guid}/actions/continue:
    post:
      tags:
        - Deployments
      summary: Continue a deployment
      description: Continue a paused deployment.
      operationId: continueDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully continued deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *403CFDeploymentsDisabled
      security:
        - oauth:
            - cloud_controller.write
  /v3/feature_flags:
    get:
      tags:
        - FeatureFlags
      summary: List feature flags
      description: Retrieve a list of all feature flags.
      operationId: listFeatureFlags
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - name: updated_ats
          in: query
          required: false
          schema:
            type: string
          description: >
            Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed.

      responses:
        "200":
          description: List of feature flags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureFlagList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - FeatureFlags
      summary: Create a feature flag
      description: Create a new feature flag.
      operationId: createFeatureFlag
      requestBody:
        description: Feature flag object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the feature flag
                enabled:
                  type: boolean
                  description: Whether the feature flag is enabled
                custom_error_message:
                  type: string
                  description: The error string returned by the API when a client performs an action disabled by the feature flag
              required:
                - name
                - enabled
      responses:
        "201":
          description: Successfully created feature flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureFlag'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFFeatureFlagInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/feature_flags/{name}:
    get:
      tags:
        - FeatureFlags
      summary: Retrieve a feature flag
      description: Retrieve details of a specific feature flag by its name.
      operationId: getFeatureFlag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the feature flag
      responses:
        "200":
          description: Successfully retrieved feature flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureFlag'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFFeatureFlagInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Feature flag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFFeatureFlagNotFound
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - FeatureFlags
      summary: Update a feature flag
      description: Update the properties of a specific feature flag by its name.
      operationId: updateFeatureFlag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the feature flag
      requestBody:
        description: Feature flag object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Whether the feature flag is enabled
                custom_error_message:
                  type: string
                  description: The error string returned by the API when a client performs an action disabled by the feature flag
      responses:
        "200":
          description: Successfully updated feature flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureFlag'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFFeatureFlagInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Feature flag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFFeatureFlagNotFound
      security:
        - oauth:
            - cloud_controller.write
  /v3/builds:
    get:
      tags:
        - Builds
      summary: List builds
      description: Retrieve a list of all builds the user has access to.
      operationId: listBuilds
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app GUIDs to filter by
        - name: package_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package GUIDs to filter by
      responses:
        "200":
          description: List of builds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - Builds
      summary: Create a build
      description: Create a new build.
      operationId: createBuild
      requestBody:
        description: Build object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                package:
                  $ref: '#/components/schemas/relationship'
                lifecycle:
                  $ref: '#/components/schemas/lifecycle'
                staging_memory_in_mb:
                  type: integer
                  description: Memory in MB allocated for staging of the build
                staging_disk_in_mb:
                  type: integer
                  description: Disk space in MB allocated for staging of the build
                staging_log_rate_limit_bytes_per_second:
                  type: integer
                  description: Log rate limit in bytes per second allocated for staging of the build
                metadata:
                  $ref: '#/components/schemas/metadata'
              required:
                - package
              description: Request schema for creating a build
      responses:
        "201":
          description: Successfully created build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/builds/{guid}:
    get:
      tags:
        - Builds
      summary: Retrieve a build
      description: Retrieve details of a specific build by its GUID.
      operationId: getBuild
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully retrieved build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Build not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Builds
      summary: Update a build
      description: Update attributes of a specific build by its GUID.
      operationId: updateBuild
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Build object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/metadata'
              description: Request schema for updating a build
      responses:
        "200":
          description: Successfully updated build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Build not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Builds
      summary: Delete a build
      description: Delete a specific build by its GUID.
      operationId: deleteBuild
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "204":
          description: Successfully deleted build
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Build not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{app_guid}/builds:
    get:
      tags:
        - Builds
      summary: List builds for an app
      description: Retrieve a list of builds for a specific app.
      operationId: listBuildsForApp
      parameters:
        - name: app_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app GUIDs to filter by
        - name: package_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package GUIDs to filter by
      responses:
        "200":
          description: List of builds for the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.read
  /v3/audit_events:
    get:
      tags:
        - AuditEvents
      summary: List audit events
      description: Retrieve a list of all audit events the user has access to.
      operationId: listAuditEvents
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/entityType'
        - name: type
          in: query
          schema:
            type: string
            description: >
              The type of the audit event

        - name: target_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of target GUIDs to filter by.

        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of space GUIDs to filter by.

        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: >
            Comma-delimited list of organization GUIDs to filter by.

      responses:
        "200":
          description: List of audit events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditEventList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - AuditEvents
      summary: Create an audit event
      description: Create a new audit event.
      operationId: createAuditEvent
      requestBody:
        description: Audit event object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: The type of the event
                actor:
                  type: object
                  properties:
                    guid:
                      type: string
                      description: The unique identifier for the actor
                    type:
                      type: string
                      description: The actor type
                    name:
                      type: string
                      description: The name of the actor
                target:
                  type: object
                  properties:
                    guid:
                      type: string
                      description: The unique identifier for the target
                    type:
                      type: string
                      description: The target type
                    name:
                      type: string
                      description: The name of the target
                data:
                  type: object
                  description: Additional information about the event
                space:
                  type: object
                  properties:
                    guid:
                      type: string
                      description: The unique identifier for the space
                organization:
                  type: object
                  properties:
                    guid:
                      type: string
                      description: The unique identifier for the organization
                metadata:
                  $ref: '#/components/schemas/metadata'
      responses:
        "201":
          description: Successfully created audit event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditEvent'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFNoCompatibleCell
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/audit_events/{guid}:
    get:
      tags:
        - AuditEvents
      summary: Retrieve an audit event
      description: Retrieve details of a specific audit event by its GUID.
      operationId: getAuditEvent
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully retrieved audit event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditEvent'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFNoCompatibleCell
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Audit event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFNoCompatibleCell
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps/{app_guid}/features:
    get:
      tags:
        - AppFeatures
      summary: List app features
      description: Retrieve a list of features for a specific app.
      operationId: listAppFeatures
      parameters:
        - name: app_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of app features
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appFeatureList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps:
    get:
      tags:
        - Apps
      summary: List apps
      description: Retrieve all apps the user has access to.
      operationId: listApps
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app GUIDs to filter by
        - name: names
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app names to filter by
        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of space GUIDs to filter by
        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of organization GUIDs to filter by
        - name: stacks
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of stack names to filter by
      responses:
        "200":
          description: List of apps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
    post:
      tags:
        - Apps
      summary: Create an app
      description: Create a new app.
      operationId: createApp
      requestBody:
        description: App object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the app
                relationships:
                  $ref: '#/components/schemas/relationships'
                lifecycle:
                  $ref: '#/components/schemas/lifecycle'
                metadata:
                  $ref: '#/components/schemas/metadata'
              required:
                - name
                - relationships
              description: Request schema for creating an app
      responses:
        "201":
          description: Successfully created app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}:
    get:
      tags:
        - Apps
      summary: Retrieve an app
      description: Retrieve details of a specific app by its GUID.
      operationId: getApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully retrieved app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Apps
      summary: Update an app
      description: Update attributes of a specific app by its GUID.
      operationId: updateApp
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: App object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the app
                lifecycle:
                  $ref: '#/components/schemas/lifecycle'
                metadata:
                  $ref: '#/components/schemas/metadata'
              required:
                - name
              description: Request schema for updating an app
      responses:
        "200":
          description: Successfully updated app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Apps
      summary: Delete an app
      description: Delete a specific app by its GUID.
      operationId: deleteApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "204":
          description: Successfully deleted app
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/actions/start:
    post:
      tags:
        - Apps
      summary: Start an app
      description: Start a specific app by its GUID.
      operationId: startApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully started app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/actions/stop:
    post:
      tags:
        - Apps
      summary: Stop an app
      description: Stop a specific app by its GUID.
      operationId: stopApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully stopped app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/actions/restart:
    post:
      tags:
        - Apps
      summary: Restart an app
      description: Stop and then start a specific app by its GUID.
      operationId: restartApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully restarted app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/droplets/current:
    get:
      tags:
        - Apps
      summary: Get current droplet for an app
      description: Retrieve the current droplet for an app by its GUID.
      operationId: getCurrentDropletForApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully retrieved current droplet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/droplet'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App or droplet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
                  - <<: *404CFAppNoResources
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Apps
      summary: Set the current droplet for an app
      description: Set the current droplet for an app by its GUID.
      operationId: setCurrentDropletForApp
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Droplet relationship object that needs to be set
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/relationship'
              required:
                - data
              description: Request schema for setting the current droplet
      responses:
        "200":
          description: Successfully set current droplet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App or droplet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
                  - <<: *404CFAppNoResources
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/features/{feature_name}:
    patch:
      tags:
        - AppFeatures
      summary: Update app feature
      description: Update the status of a specific feature for a given app.
      operationId: updateAppFeature
      parameters:
        - name: guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: feature_name
          in: path
          required: true
          schema:
            type: string
            description: The name of the app feature
      requestBody:
        description: App feature object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Whether the app feature should be enabled
      responses:
        "200":
          description: Successfully updated app feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appFeature'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNoResources
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNoResources
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
  /v3/routes:
    post:
      tags:
        - Routes
      summary: Create a route
      description: Create a new route
      operationId: createRoute
      requestBody:
        $ref: '#/components/requestBodies/routeCreateRequestBody'
      responses:
        "201":
          $ref: '#/components/responses/routeCreateResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 210001
                    title: CF-RouteInvalid
                    detail: "The route is invalid: [detailed message]"
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
    get:
      tags:
        - Routes
      summary: List routes
      description: Retrieve a list of routes available in the system.
      operationId: listRoutes
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: protocols
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of protocols to filter by
        - name: hosts
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of hosts to filter by
        - name: paths
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of paths to filter by
        - name: ports
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Comma-delimited list of ports to filter by
        - name: domain_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of domain GUIDs to filter by
        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of space GUIDs to filter by
      responses:
        "200":
          $ref: '#/components/responses/routeListResponse'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
  /v3/routes/{guid}/destinations:
    get:
      tags:
        - Routes
      summary: List destinations for a route
      description: Retrieve a list of destinations for a specific route by its GUID.
      operationId: listDestinationsForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        "200":
          description: List of destinations for the route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeDestinationList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: "The query parameter is invalid: [detailed message]"
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.read
    post:
      tags:
        - Routes
      summary: Insert destinations for a route
      description: Insert destinations for a specific route by its GUID.
      operationId: insertDestinationsForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/routeDestinations'
      responses:
        "200":
          description: List of destinations for the route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeDestinationList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
    put:
      tags:
        - Routes
      summary: Replace all destinations for a route
      description: Replace all destinations for a specific route by its GUID.
      operationId: replaceDestinationsForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/routeDestinations'
      responses:
        "200":
          description: List of destinations for the route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeDestinationList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
  /v3/routes/{guid}/destinations/{destination_guid}:
    patch:
      tags:
        - Routes
      summary: Update a destination protocol for a route
      description: Update the protocol of a specific route destination by its GUID.
      operationId: updateDestinationProtocolForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: destination_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the route destination
      requestBody:
        description: Protocol of the destination
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                protocol:
                  type: string
                  description: Protocol of the destination
                  enum:
                    - http1
                    - http2
              required:
                - protocol
      responses:
        "200":
          description: Successfully updated protocol of the destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeDestination'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Destination not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Routes
      summary: Remove destination for a route
      description: Remove a destination from a specific route by its GUID.
      operationId: removeDestinationForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: destination_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the route destination to remove
      responses:
        "204":
          description: Successfully removed destination from the route
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Destination not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
      security:
        - oauth:
            - cloud_controller.write
  /v3/spaces/{guid}/routes:
    delete:
      tags:
        - Routes
      summary: Delete unmapped routes for a space
      description: Delete routes that are unmapped in a specific space.
      operationId: deleteUnmappedRoutesForSpace
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "204":
          description: Successfully deleted unmapped routes from the space
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Space not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFSpaceNotFound
      security:
        - oauth:
            - cloud_controller.write
  /v3/roles:
    get:
      tags:
        - Roles
      summary: List roles
      description: Retrieve all roles the user has access to.
      operationId: listRoles
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          description: Comma-delimited list of role guids to filter by
          schema:
            type: array
            items:
              type: string
        - name: types
          in: query
          description: Comma-delimited list of role types to filter by
          schema:
            type: array
            items:
              type: string
              enum:
                - organization_user
                - organization_auditor
                - organization_manager
                - organization_billing_manager
                - space_auditor
                - space_developer
                - space_manager
                - space_supporter
        - name: organization_guids
          in: query
          description: Comma-delimited list of organization guids to filter by
          schema:
            type: array
            items:
              type: string
        - name: space_guids
          in: query
          description: Comma-delimited list of space guids to filter by
          schema:
            type: array
            items:
              type: string
        - name: user_guids
          in: query
          description: Comma-delimited list of user guids to filter by
          schema:
            type: array
            items:
              type: string
        - name: include
          in: query
          description: Optionally include additional related resources in the response; valid values are `user`, `space`, and `organization`.
          schema:
            type: array
            items:
              type: string
              enum:
                - user
                - space
                - organization
      responses:
        '200':
          $ref: '#/components/responses/RoleListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    post:
      tags:
        - Roles
      summary: Create a role
      description: Create a new role.
      operationId: createRole
      requestBody:
        $ref: '#/components/requestBodies/RoleCreate'
      responses:
        '201':
          $ref: '#/components/responses/RoleCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/roles/{guid}:
    get:
      tags:
        - Roles
      summary: Get a role
      description: Retrieve a specific role by its GUID.
      operationId: getRole
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: include
          in: query
          description: Optionally include additional related resources in the response; valid values are `user`, `space`, and `organization`.
          schema:
            type: array
            items:
              type: string
              enum:
                - user
                - space
                - organization
      responses:
        '200':
          $ref: '#/components/responses/RoleGetResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
    delete:
      tags:
        - Roles
      summary: Delete a role
      description: Delete a specific role by its GUID.
      operationId: deleteRole
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /:
    get:
      tags:
        - Root
      summary: Get root
      description: The Root endpoint provides the entry point for the Cloud Foundry API. It includes links to all the available resources and endpoints.
      operationId: getRoot
      security:
        - oauth:
            - cloud_controller.read
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the current endpoint
                      apps:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Apps endpoint
                      buildpacks:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Buildpacks endpoint
                      builds:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Builds endpoint
                      deployments:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Deployments endpoint
                      domains:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Domains endpoint
                      droplets:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Droplets endpoint
                      environment_variable_groups:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Environment Variable Groups endpoint
                      feature_flags:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Feature Flags endpoint
                      info:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Info endpoint
                      isolation_segments:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Isolation Segments endpoint
                      jobs:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Jobs endpoint
                      organization_quotas:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Organization Quotas endpoint
                      organizations:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Organizations endpoint
                      packages:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Packages endpoint
                      processes:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Processes endpoint
                      resource_matches:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Resource Matches endpoint
                      roles:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Roles endpoint
                      routes:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Routes endpoint
                      security_groups:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Security Groups endpoint
                      service_brokers:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Brokers endpoint
                      service_credential_bindings:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Credential Bindings endpoint
                      service_instances:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Instances endpoint
                      service_offerings:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Offerings endpoint
                      service_plans:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Plans endpoint
                      service_plan_visibilities:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Plan Visibilities endpoint
                      service_route_bindings:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Route Bindings endpoint
                      service_usage_events:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Usage Events endpoint
                      sidecars:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Sidecars endpoint
                      space_quotas:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Space Quotas endpoint
                      spaces:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Spaces endpoint
                      stacks:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Stacks endpoint
                      tasks:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Tasks endpoint
                      users:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Users endpoint
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/apps/{guid}/revisions:
    get:
      tags:
        - Revisions
      summary: List revisions for an app
      description: Retrieve a list of revisions for a specific app.
      operationId: listRevisionsForApp
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: versions
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Filter by revision versions
      responses:
        "200":
          description: List of revisions for the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revisionList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps/{guid}/revisions/deployed:
    get:
      tags:
        - Revisions
      summary: List deployed revisions for an app
      description: Retrieve a list of deployed revisions for a specific app.
      operationId: listDeployedRevisionsForApp
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: versions
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Filter by revision versions
      responses:
        "200":
          description: List of deployed revisions for the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revisionList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps/{guid}/revisions/{version}:
    get:
      tags:
        - Revisions
      summary: Get a revision
      description: Retrieve a specific revision of an app by its version number.
      operationId: getRevision
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: version
          in: path
          required: true
          schema:
            type: integer
            description: The version number of the revision
      responses:
        "200":
          description: Successfully retrieved revision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revision'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App or revision not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Revisions
      summary: Update a revision
      description: Update a revision of an app by its version number.
      operationId: updateRevision
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: version
          in: path
          required: true
          schema:
            type: integer
            description: The version number of the revision
      requestBody:
        $ref: '#/components/requestBodies/revisionUpdateRequestBody'
      responses:
        "200":
          description: Successfully updated revision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revision'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App or revision not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/revisions/{version}/environment_variables:
    get:
      tags:
        - Revisions
      summary: Get environment variables for a revision
      description: Retrieve the environment variables associated with a specific revision of an app.
      operationId: getEnvironmentVariablesForRevision
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: version
          in: path
          required: true
          schema:
            type: integer
            description: The version number of the revision
      responses:
        "200":
          description: Successfully retrieved environment variables
          content:
            application/json:
              schema:
                type: object
                properties:
                  var:
                    type: object
                    additionalProperties:
                      type: string
                    description: Environment variables for the revision
                  links:
                    type: object
                    properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the current endpoint
                      revision:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the revision
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App or revision not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
      security:
        - oauth:
            - cloud_controller.read
  /v3/packages:
    get:
      tags:
        - Packages
      summary: List packages
      description: Retrieve a list of all packages the user has access to.
      operationId: listPackages
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package guids to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package states to filter by
        - name: types
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package types to filter by
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app guids to filter by
        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of space guids to filter by
        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of organization guids to filter by
      responses:
        "200":
          description: List of packages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/packageList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
    post:
      tags:
        - Packages
      summary: Create a package
      description: Create a new package.
      operationId: createPackage
      requestBody:
        $ref: '#/components/requestBodies/packageCreateRequestBody'
      responses:
        "201":
          description: Successfully created package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppPackageInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *422CFUnprocessableEntity
      security:
        - oauth:
            - cloud_controller.write
  /v3/packages/{guid}:
    get:
      tags:
        - Packages
      summary: Get a package
      description: Retrieve a specific package by its GUID.
      operationId: getPackage
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully retrieved package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppPackageNotFound
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Packages
      summary: Update a package
      description: Update attributes of a specific package by its GUID.
      operationId: updatePackage
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/packageUpdateRequestBody'
      responses:
        "200":
          description: Successfully updated package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppPackageInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppPackageNotFound
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Packages
      summary: Delete a package
      description: Delete a specific package by its GUID.
      operationId: deletePackage
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "202":
          description: Successfully deleted package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppPackageInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppPackageNotFound
      security:
        - oauth:
            - cloud_controller.write
  /v3/packages/{guid}/upload:
    post:
      tags:
        - Packages
      summary: Upload package bits
      description: Upload the bits for a specific package by its GUID.
      operationId: uploadPackageBits
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/packageUploadRequestBody'
      responses:
        "200":
          description: Successfully uploaded package bits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFPackageBitsAlreadyUploaded
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppPackageNotFound
      security:
        - oauth:
            - cloud_controller.write
  /v3/packages/{guid}/download:
    get:
      tags:
        - Packages
      summary: Download package bits
      description: Download the bits for a specific package by its GUID.
      operationId: downloadPackageBits
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "302":
          description: Redirect to download location
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppPackageNotFound
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps/{guid}/packages:
    get:
      tags:
        - Packages
      summary: List packages for an app
      description: Retrieve a list of packages for a specific app.
      operationId: listPackagesForApp
      parameters:
        - name: guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package guids to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package states to filter by
        - name: types
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package types to filter by
      responses:
        "200":
          description: List of packages for the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/packageList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppNotFound
      security:
        - oauth:
            - cloud_controller.read
  /v3//packages:
    post:
      tags:
        - Packages
      summary: Copy a package
      description: Copy a package to a different app.
      operationId: copyPackage
      parameters:
        - name: source_guid
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the package to copy from
      requestBody:
        description: Destination app for the copied package
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationships:
                  $ref: '#/components/schemas/relationships'
              required:
                - relationships
              description: Request schema for copying a package
      responses:
        "201":
          description: Successfully copied package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFAppBitsCopyInvalid
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Package or app not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFAppPackageNotFound
      security:
        - oauth:
            - cloud_controller.write
  /v3/jobs/{guid}:
    get:
      tags:
        - Jobs
      summary: Get a job
      description: Retrieve a specific job by its GUID.
      operationId: getJob
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        "200":
          description: Successfully retrieved job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
      security:
        - oauth:
            - cloud_controller.read
  /v3/jobs:
    get:
      tags:
        - Jobs
      summary: List jobs
      description: Retrieve a list of all jobs the user has access to.
      operationId: listJobs
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of job guids to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of job states to filter by
        - name: operations
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of operation types to filter by
        - name: resource_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of resource guids to filter by
      responses:
        "200":
          description: List of jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobList'
        "401":
          $ref: '#/components/responses/401Unauthorized'
        "403":
          $ref: '#/components/responses/403Forbidden'
        "500":
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
  /v3/info:
    get:
      tags:
        - Info
      summary: Get platform info
      description: |-
        Returns information about the platform.
      operationId: getPlatformInfo
      security:
        - oauth:
            - cloud_controller.admin
            - cloud_controller.admin_read_only
            - cloud_controller.global_auditor
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the platform
                  build:
                    type: string
                    description: Build number of the platform
                  version:
                    type: integer
                    description: Version number of the platform
                  description:
                    type: string
                    description: Description of the platform
                  cli_version:
                    type: object
                    description: Minimum and recommended CLI versions
                    properties:
                      minimum:
                        type: string
                        description: Minimum CLI version
                      recommended:
                        type: string
                        description: Recommended CLI version
                  custom:
                    type: object
                    description: Custom information about the platform
                    additionalProperties:
                      type: string
                  links:
                    type: object
                    description: Links to related resources
                    properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the current endpoint
                      support:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the support website for the platform
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/info/usage_summary:
    get:
      tags:
        - Info
      summary: Get platform usage summary
      description: |-
        This endpoint retrieves a high-level summary of usage across the entire Cloud Foundry installation.
      operationId: getPlatformUsageSummary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  usage_summary:
                    type: object
                    description: |-
                      Usage summary object

                      Name                    Type     Description
                      started_instances        integer Total number of process instances in the STARTED state
                      memory_in_mb            integer Sum of memory usage of all tasks in the RUNNING state and all process instances in the STARTED state
                    properties:
                      started_instances:
                        type: integer
                        description: Total number of process instances in the STARTED state
                      memory_in_mb:
                        type: integer
                        description: Sum of memory usage of all tasks in the RUNNING state and all process instances in the STARTED state
                  links:
                    type: object
                    description: Links to related resources
                    properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the current endpoint
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
            - cloud_controller.admin_read_only
            - cloud_controller.global_auditor
  /v3/app_usage_events:
    get:
      tags:
        - AppUsageEvents
      summary: List app usage events
      description: Retrieve all app usage events the user has access to.
      operationId: listAppUsageEvents
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - name: after_guid
          in: query
          description: Filters out events before and including the event with the given guid.
          schema:
            type: string
        - name: guids
          in: query
          description: Comma-delimited list of usage event guids to filter by.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appUsageEventList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
            - cloud_controller.admin_read_only
            - cloud_controller.global_auditor
  /v3/app_usage_events/{guid}:
    get:
      tags:
        - AppUsageEvents
      summary: Get an app usage event
      description: Retrieve a specific app usage event by its GUID.
      operationId: getAppUsageEvent
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appUsageEvent'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App usage event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
            - cloud_controller.admin_read_only
            - cloud_controller.global_auditor
  /v3/app_usage_events/actions/destructively_purge_all_and_reseed:
    post:
      tags:
        - AppUsageEvents
      summary: Purge and seed app usage events
      description: |-
        Destroys all existing events. Populates new usage events, one for each
        started app. All populated events will have a created_at value of
        current time. There is the potential race condition if apps are
        currently being started, stopped, or scaled. The seeded usage events
        will have the same guid as the app.
      operationId: purgeAndSeedAppUsageEvents
      responses:
        '202':
          description: Accepted
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
  /v3/isolation_segments:
    get:
      tags:
        - IsolationSegments
      summary: List isolation segments
      description: Retrieve all isolation segments the user has access to.
      operationId: listIsolationSegments
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          description: Comma-delimited list of isolation segment guids to filter by.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: names
          in: query
          description: Comma-delimited list of isolation segment names to filter by.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: organization_guids
          in: query
          description: Comma-delimited list of organization guids to filter by.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isolationSegmentList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    post:
      tags:
        - IsolationSegments
      summary: Create an isolation segment
      description: Create a new isolation segment.
      operationId: createIsolationSegment
      security:
        - oauth:
            - cloud_controller.admin
      requestBody:
        $ref: '#/components/requestBodies/isolationSegmentCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isolationSegment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/isolation_segments/{guid}:
    get:
      tags:
        - IsolationSegments
      summary: Get an isolation segment
      description: Retrieve a specific isolation segment by its GUID.
      operationId: getIsolationSegment
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isolationSegment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
    patch:
      tags:
        - IsolationSegments
      summary: Update an isolation segment
      description: Update a specific isolation segment by its GUID.
      operationId: updateIsolationSegment
      security:
        - oauth:
            - cloud_controller.admin
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Isolation segment to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the isolation segment
                metadata:
                  $ref: '#/components/schemas/metadata'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isolationSegment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
    delete:
      tags:
        - IsolationSegments
      summary: Delete an isolation segment
      description: Delete a specific isolation segment by its GUID.
      operationId: deleteIsolationSegment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
  /v3/isolation_segments/{guid}/relationships/organizations:
    post:
      tags:
        - IsolationSegments
      summary: Entitle organizations for isolation segment
      description: |-
        This endpoint entitles the specified organizations for the isolation segment. In the case where the specified isolation segment is the system-wide shared segment, and if an organization is not already entitled for any other isolation segment, then the shared isolation segment automatically gets assigned as the default for that organization.
      operationId: entitleOrganizationsForIsolationSegment
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: List of organizations to entitle
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationshipToMany'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationshipToMany'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
    get:
      tags:
        - IsolationSegments
      summary: List organizations
      description: |-
        List all organizations entitled to the isolation segment.
      operationId: listOrganizationsForIsolationSegment
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationshipToMany'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
  /v3/isolation_segments/{guid}/relationships/organizations/{org_guid}:
    delete:
      tags:
        - IsolationSegments
      summary: Revoke entitlement of an organization
      description: Revoke the entitlement of an organization for an isolation segment.
      operationId: revokeIsolationSegmentForOrganization
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: org_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the organization to revoke entitlement from.
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment or organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
  /v3/isolation_segments/{guid}/relationships/spaces:
    get:
      tags:
        - IsolationSegments
      summary: List spaces
      description: List all spaces assigned to the isolation segment.
      operationId: listSpacesForIsolationSegment
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationshipToMany'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *400CFBadQueryParameter
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - <<: *404CFResourceNotFound
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
tags:
  - name: Apps
    description: |
      Apps represent the core entities in the Cloud Foundry environment. They are the deployable units that run your code. Each app can have multiple processes, routes, and services associated with it. Apps can be scaled horizontally by increasing the number of instances. They can also be updated and restarted as needed. The lifecycle of an app includes stages such as staging, starting, running, and stopping. Apps can be managed through various endpoints that allow for creation, updating, deletion, and retrieval of app details.
  - name: AppFeatures
    description: |
      AppFeatures provide additional capabilities and configurations for apps. These features can include things like auto-scaling, health checks, and custom domains. AppFeatures enhance the functionality of apps by allowing developers to enable or disable specific features based on their requirements. They can be managed through endpoints that allow for enabling, disabling, and retrieving the status of app features.
  - name: AppUsageEvents
    description: |
      AppUsageEvents track the usage and activity of apps within the Cloud Foundry environment. These events provide insights into app lifecycle changes, such as creation, deletion, scaling, and crashes. AppUsageEvents are useful for monitoring and auditing purposes, helping administrators understand how apps are being used and identify any issues. They can be retrieved through endpoints that provide detailed information about each event.
  - name: AuditEvents
    description: |
      AuditEvents capture significant actions and changes within the Cloud Foundry environment. These events include actions performed by users, such as creating, updating, or deleting resources. AuditEvents provide a comprehensive audit trail that helps administrators track changes and ensure compliance with organizational policies. They can be retrieved through endpoints that provide detailed information about each event, including the user who performed the action and the affected resources.
  - name: Builds
    description: |
      Builds represent the process of transforming source code into a runnable artifact. In Cloud Foundry, builds are created using buildpacks, which provide the necessary dependencies and configurations for the app. Builds can be triggered manually or automatically as part of the app deployment process. They can be managed through endpoints that allow for creation, updating, deletion, and retrieval of build details.
  - name: Buildpacks
    description: |
      Buildpacks are responsible for detecting, compiling, and packaging apps in the Cloud Foundry environment. They provide the necessary runtime and dependencies for the app to run. Buildpacks can be customized and extended to support different languages and frameworks. They can be managed through endpoints that allow for creation, updating, deletion, and retrieval of buildpack details.
  - name: Deployments
    description: |
      Deployments represent the process of deploying apps to the Cloud Foundry environment. They include stages such as staging, starting, and running the app. Deployments can be triggered manually or automatically as part of the app lifecycle. They can be managed through endpoints that allow for creation, updating, deletion, and retrieval of deployment details.
  - name: Domains
    description: |
      Domains represent the DNS domains used to route traffic to apps in the Cloud Foundry environment. They can be shared or private, and can be associated with specific organizations or spaces. Domains can be managed through endpoints that allow for creation, updating, deletion, and retrieval of domain details.
  - name: Droplets
    description: |
      Droplets are the runnable artifacts created from builds in the Cloud Foundry environment. They contain the compiled code and dependencies needed to run the app. Droplets can be managed through endpoints that allow for creation, updating, deletion, and retrieval of droplet details.
  - name: EnvironmentVariableGroups
    description: |
      EnvironmentVariableGroups represent collections of environment variables that can be applied to apps in the Cloud Foundry environment. They provide a way to manage and share common configurations across multiple apps. EnvironmentVariableGroups can be managed through endpoints that allow for creation, updating, deletion, and retrieval of environment variable group details.
  - name: FeatureFlags
    description: |
      FeatureFlags provide a way to enable or disable specific features in the Cloud Foundry environment. They allow administrators to control the availability of features based on organizational requirements. FeatureFlags can be managed through endpoints that allow for enabling, disabling, and retrieving the status of feature flags.
  - name: Info
    description: |
      The Info endpoint provides information about the Cloud Foundry environment, including version details, API endpoints, and other metadata. It is useful for understanding the capabilities and configuration of the environment. The Info endpoint can be accessed to retrieve detailed information about the Cloud Foundry deployment.
  - name: IsolationSegments
    description: |
      IsolationSegments provide a way to isolate apps and resources within the Cloud Foundry environment. They allow for the creation of isolated environments with dedicated resources, such as compute, storage, and networking. IsolationSegments can be managed through endpoints that allow for creation, updating, deletion, and retrieval of isolation segment details.
  - name: Jobs
    description: |
      Jobs represent asynchronous operations in the Cloud Foundry environment. They are used for tasks that may take a long time to complete, such as app deployments, service provisioning, and data migrations. Jobs can be managed through endpoints that allow for creation, updating, deletion, and retrieval of job details.
  - name: Manifests
    description: |
      Manifests provide a way to define the configuration and deployment details of apps in the Cloud Foundry environment. They include information such as app name, buildpack, environment variables, and services. Manifests can be used to automate the deployment and management of apps. They can be managed through endpoints that allow for creation, updating, deletion, and retrieval of manifest details.
  - name: Organizations
    description: |
      Organizations represent the top-level entities in the Cloud Foundry environment. They provide a way to group and manage resources, such as apps, spaces, and users. Organizations can be managed through endpoints that allow for creation, updating, deletion, and retrieval of organization details.
  - name: OrganizationQuotas
    description: |
      OrganizationQuotas define the resource limits and constraints for organizations in the Cloud Foundry environment. They include limits on memory, instances, routes, and services. OrganizationQuotas can be managed through endpoints that allow for creation, updating, deletion, and retrieval of organization quota details.
  - name: Packages
    description: |
      Packages represent the source code and dependencies of apps in the Cloud Foundry environment. They are used to create builds and droplets. Packages can be managed through endpoints that allow for creation, updating, deletion, and retrieval of package details.
  - name: Processes
    description: |
      Processes represent the runnable units of apps in the Cloud Foundry environment. They include information such as command, instances, memory, and disk. Processes can be managed through endpoints that allow for creation, updating, deletion, and retrieval of process details.
  - name: ResourceMatches
    description: |
      ResourceMatches provide a way to identify and reuse existing resources in the Cloud Foundry environment. They help optimize resource usage by matching new resources with existing ones. ResourceMatches can be managed through endpoints that allow for creation, updating, deletion, and retrieval of resource match details.
  - name: Revisions
    description: |
      Revisions represent the versions of apps in the Cloud Foundry environment. They provide a way to track and manage changes to apps over time. Revisions can be managed through endpoints that allow for creation, updating, deletion, and retrieval of revision details.
  - name: Roles
    description: |
      Roles define the permissions and access levels for users in the Cloud Foundry environment. They include roles such as admin, developer, and auditor. Roles can be managed through endpoints that allow for creation, updating, deletion, and retrieval of role details.
  - name: Root
    description: |
      The Root endpoint provides the entry point for the Cloud Foundry API. It includes links to all the available resources and endpoints. The Root endpoint can be accessed to retrieve detailed information about the Cloud Foundry API and its capabilities.
  - name: Routes
    description: |
      Routes represent the network endpoints used to access apps in the Cloud Foundry environment. They include information such as domain, path, and port. Routes can be managed through endpoints that allow for creation, updating, deletion, and retrieval of route details.
  - name: SecurityGroups
    description: |
      SecurityGroups define the network access rules for apps in the Cloud Foundry environment. They include rules for inbound and outbound traffic. SecurityGroups can be managed through endpoints that allow for creation, updating, deletion, and retrieval of security group details.
  - name: ServiceBrokers
    description: |
      ServiceBrokers provide a way to manage and provision services in the Cloud Foundry environment. They include information such as service plans, instances, and bindings. ServiceBrokers can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service broker details.
  - name: ServiceOfferings
    description: |
      ServiceOfferings represent the available services in the Cloud Foundry environment. They include information such as service plans, instances, and bindings. ServiceOfferings can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service offering details.
  - name: ServicePlans
    description: |
      ServicePlans define the configurations and pricing for services in the Cloud Foundry environment. They include information such as memory, instances, and routes. ServicePlans can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service plan details.
  - name: ServicePlanVisibility
    description: |
      ServicePlanVisibility defines the visibility and access rules for service plans in the Cloud Foundry environment. They include information such as organization and space access. ServicePlanVisibility can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service plan visibility details.
  - name: ServiceInstances
    description: |
      ServiceInstances represent the instances of services in the Cloud Foundry environment. They include information such as service plans, bindings, and credentials. ServiceInstances can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service instance details.
  - name: ServiceCredentialBinding
    description: |
      ServiceCredentialBinding provides a way to bind service instances to apps in the Cloud Foundry environment. They include information such as credentials and bindings. ServiceCredentialBinding can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service credential binding details.
  - name: ServiceRouteBinding
    description: |
      ServiceRouteBinding provides a way to bind service instances to routes in the Cloud Foundry environment. They include information such as credentials and bindings. ServiceRouteBinding can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service route binding details.
  - name: ServiceUsageEvents
    description: |
      ServiceUsageEvents track the usage and activity of services in the Cloud Foundry environment. They provide insights into service lifecycle changes, such as creation, deletion, and updates. ServiceUsageEvents are useful for monitoring and auditing purposes, helping administrators understand how services are being used and identify any issues. They can be retrieved through endpoints that provide detailed information about each event.
  - name: Sidecars
    description: |
      Sidecars represent additional processes that run alongside the main app processes in the Cloud Foundry environment. They provide additional functionality, such as logging, monitoring, and security. Sidecars can be managed through endpoints that allow for creation, updating, deletion, and retrieval of sidecar details.
  - name: Spaces
    description: |
      Spaces represent the logical grouping of resources within an organization in the Cloud Foundry environment. They provide a way to manage apps, services, and users within a specific context. Spaces can be managed through endpoints that allow for creation, updating, deletion, and retrieval of space details.
  - name: SpaceFeatures
    description: |
      SpaceFeatures provide additional capabilities and configurations for spaces in the Cloud Foundry environment. These features can include things like auto-scaling, health checks, and custom domains. SpaceFeatures enhance the functionality of spaces by allowing administrators to enable or disable specific features based on their requirements. They can be managed through endpoints that allow for enabling, disabling, and retrieving the status of space features.
  - name: SpaceQuotas
    description: |
      SpaceQuotas define the resource limits and constraints for spaces in the Cloud Foundry environment. They include limits on memory, instances, routes, and services. SpaceQuotas can be managed through endpoints that allow for creation, updating, deletion, and retrieval of space quota details.
  - name: Stacks
    description: |
      Stacks are the base operating system and file system that your application will execute in. A stack is how you configure applications to run against different operating systems (like Windows or Linux) and different versions of those operating systems (like Windows 2012 or Windows 2016).

      An application’s lifecycle will specify which stack to execute the application in. Buildpacks can also be associated with a particular stack if they contain stack-specific logic. An application will automatically use buildpacks associated with the application’s configured stack.

      Stacks are not used for apps with a Docker lifecycle.
  - name: Tasks
    description: |
      Tasks represent one-off processes that can be run in the Cloud Foundry environment. They provide a way to execute background jobs, data migrations, and other tasks that are not part of the main app processes. Tasks can be managed through endpoints that allow for creation, updating, deletion, and retrieval of task details.
  - name: Users
    description: |-
      Users represent the individuals who have access to the Cloud Foundry environment. They include information such as roles, permissions, and credentials. Users can be managed through endpoints that allow for creation, updating, deletion, and retrieval of user details.
  - name: Routes
    description: |
      Routes represent the network endpoints used to access apps in the Cloud Foundry environment. They include information such as domain, path, and port. Routes can be managed through endpoints that allow for creation, updating, deletion, and retrieval of route details. By specifying routes, applications can define how they are accessed by end-users, ensuring traffic is directed to the appropriate application instances.
